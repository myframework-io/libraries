<?xml version="1.0" encoding="utf-8"?>
<CodeSnippets xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Template de uma controller de API.</Title>
      <Author>Myframework</Author>
      <Description></Description>
      <Shortcut>controller</Shortcut>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>Myframework.Microservice.API.Application.Commands.Terms</Namespace>
        </Import>
        <Import>
          <Namespace>Myframework.Microservice.API.Application.Queries.Terms</Namespace>
        </Import>
        <Import>
          <Namespace>Myframework.Microservice.API.Application.ViewModels.Terms</Namespace>
        </Import>
        <Import>
          <Namespace>Myframework.Libraries.Application.Base</Namespace>
        </Import>
        <Import>
          <Namespace>Myframework.Libraries.Application.Security.Authorization</Namespace>
        </Import>
        <Import>
          <Namespace>Myframework.Libraries.Common.Pagination</Namespace>
        </Import>
        <Import>
          <Namespace>Myframework.Libraries.Common.Results</Namespace>
        </Import>
        <Import>
          <Namespace>Myframework.Libraries.Infra.CQRS.Mediators</Namespace>
        </Import>
        <Import>
          <Namespace>Microsoft.AspNetCore.Mvc</Namespace>
        </Import>
        <Import>
          <Namespace>System.Threading.Tasks</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>resource</ID>
          <ToolTip>Nome do recurso em inglês.</ToolTip>
          <Default>Resource</Default>
        </Literal>
        <Literal>
          <ID>resourceUrl</ID>
          <ToolTip>Nome do resource na URL, utilizar plural e inglês.</ToolTip>
          <Default>resources</Default>
        </Literal>
        <Literal>
          <ID>resourceDoc</ID>
          <ToolTip>Texto que representa o resource na documentação.</ToolTip>
          <Default>Resource</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp">
        <![CDATA[
			/// <summary>
			/// API responsável por gerenciar $resourceDoc$s.
			/// </summary>
			[ApiController, Route("api/$resourceUrl$"), AuthorizeRoles(RolesGroups.Administrators, RolesGroups.ProductManagers)]
			public class $resource$sController : BaseController
			{
				#region Commands

				/// <summary>
				/// Cria um novo $resourceDoc$.
				/// </summary>
				/// <param name="mediatorHandler"></param>
				/// <param name="command"></param>
				/// <returns></returns>
				[Route(""), HttpPost]
				public async Task<IActionResult> Create$resource$Async([FromServices] IMediatorHandler mediatorHandler, [FromBody] Create$resource$Command command) =>					
					GetIActionResult(await mediatorHandler.DispatchCommandAsync(command));

				/// <summary>
				/// Atualiza um $resourceDoc$.
				/// </summary>
				/// <param name="mediatorHandler"></param>
				/// <param name="id"></param>
				/// <param name="command"></param>
				/// <returns></returns>
				[Route("{id}"), HttpPut]
				public async Task<IActionResult> Update$resource$Async([FromServices] IMediatorHandler mediatorHandler, [FromRoute] long id, [FromBody] Update$resource$Command command)
				{
					command.$resource$Id = id;					
					return GetIActionResult(await mediatorHandler.DispatchCommandAsync(command));
				}

				/// <summary>
				/// Deleta um $resourceDoc$.
				/// </summary>
				/// <param name="mediatorHandler"></param>
				/// <param name="command"></param>
				/// <returns></returns>
				[Route("{termId}"), HttpDelete]
				public async Task<IActionResult> Delete$resource$Async([FromServices] IMediatorHandler mediatorHandler, [FromRoute] Delete$resource$Command command) =>
					GetIActionResult(await mediatorHandler.DispatchCommandAsync(command));

				#endregion

				#region Queries

				/// <summary>
				/// Retorna $resourceDoc$s paginados.
				/// </summary>
				/// <param name="queries"></param>
				/// <param name="filter"></param>
				/// <returns></returns>
				[Route(""), HttpGet, ProducesResponseType(200, Type = typeof(Result<PagedList<$resource$ViewModel>>))]
				public async Task<IActionResult> Get$resource$sPagedAsync([FromServices] I$resource$sQueries queries, [FromQuery] $resource$FilterViewModel filter) =>
					CreateResultForQueries(await queries.Get$resource$sPagedAsync(filter));

				/// <summary>
				/// Retorna o $resourceDoc$ pelo ID.
				/// </summary>
				/// <param name="queries"></param>
				/// <param name="id"></param>
				/// <returns></returns>
				[Route("{id}"), HttpGet, ProducesResponseType(200, Type = typeof(Result<$resource$ViewModel>))]
				public async Task<IActionResult> Get$resource$ByIdAsync([FromServices] I$resource$sQueries queries, [FromRoute] long id) =>
					CreateResultForQueries(await queries.Get$resource$ByIdAsync(id));

				#endregion Queries
			}			
        ]]>
      </Code>
    </Snippet>
  </CodeSnippet>
</CodeSnippets>