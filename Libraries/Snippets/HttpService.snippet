<?xml version="1.0" encoding="utf-8"?>
<CodeSnippets xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Template de um HttpService.</Title>
      <Author>Myframework</Author>
      <Description></Description>
      <Shortcut>httpService</Shortcut>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>Myframework.Microservice.Infra.HttpServices.MicroserviceTarget.Models</Namespace>
        </Import>
        <Import>
          <Namespace>Myframework.Microservice.Infra.HttpServices</Namespace>
        </Import>
        <Import>
          <Namespace>Myframework.Microservice.Infra.HttpServices.MicroserviceTarget</Namespace>
        </Import>
        <Import>
          <Namespace>Myframework.Libraries.Common.Pagination</Namespace>
        </Import>        
        <Import>
          <Namespace>Myframework.Libraries.Common.Results</Namespace>
        </Import>
        <Import>
          <Namespace>Myframework.Libraries.Infra.Http.Exensions</Namespace>
        </Import>
        <Import>
          <Namespace>Microsoft.Extensions.Options</Namespace>
        </Import>
        <Import>
          <Namespace>System</Namespace>
        </Import>
        <Import>
          <Namespace>System.Collections.Generic</Namespace>
        </Import>
        <Import>
          <Namespace>System.Net.Http</Namespace>
        </Import>
        <Import>
          <Namespace>System.Threading.Tasks</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>microservice</ID>
          <ToolTip>Nome microservi√ßo que o HttpService representa.</ToolTip>
          <Default>Microservice</Default>
        </Literal>
        <Literal>
          <ID>resource</ID>
          <ToolTip>Nome do resource.</ToolTip>
          <Default>Resource</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp">
        <![CDATA[
	        public class $microservice$HttpService : I$microservice$HttpService
          {
              private readonly $microservice$HttpServiceOptions options;
              private readonly HttpClient httpClient;

              public $microservice$HttpService(HttpClient httpClient, IOptions<HttpServiceOptions> options)
              {
                  this.options = options.Value.$microservice$ ?? throw new ArgumentException("Http options missing.", nameof(options));
                  this.httpClient = httpClient;
              }

              #region $resource$s

              public async Task<Result<PagedList<$resource$Model>>> Get$resource$sAsync($resource$sFilterModel filter, Dictionary<string, string> aditionalHeaders = null) =>
                  await httpClient.GetResultAsync<PagedList<$resource$Model>>(
                      requestUri: options.$resource$sRoute,
                      queryStringObject: filter,
                      headers: aditionalHeaders);

              public async Task<Result<$resource$>> Get$resource$ByIdAsync(Guid id, Dictionary<string, string> aditionalHeaders = null) =>
                  await httpClient.GetResultAsync<$resource$>(
                      requestUri: $$"{options.$resource$Route}/{id}",
                      queryStringObject: null,
                      headers: aditionalHeaders);

              public async Task<Result> Create$resource$Async(Create$resource$Model model, Dictionary<string, string> aditionalHeaders = null) =>
                  await httpClient.PostJsonResultAsync(
                      requestUri: options.$resource$sRoute,
                      bodyObject: model,
                      headers: aditionalHeaders);

              public async Task<Result> Update$resource$Async(Update$resource$Model model, Dictionary<string, string> aditionalHeaders = null) =>
                  await httpClient.PutJsonResultAsync(
                      requestUri: options.$resource$sRoute,
                      bodyObject: model,
                      headers: aditionalHeaders);

              public async Task<Result> Delete$resource$Async(Guid id, Dictionary<string, string> aditionalHeaders = null) =>
                  await httpClient.DeleteResultAsync(
                      requestUri: $$"{options.$resource$sRoute}/{id}",
                      queryStringObject: null,
                      headers: aditionalHeaders);

              #endregion $resource$s
          }
        ]]>
      </Code>
    </Snippet>
  </CodeSnippet>
</CodeSnippets>