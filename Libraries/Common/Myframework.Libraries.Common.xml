<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Myframework.Libraries.Common</name>
    </assembly>
    <members>
        <member name="T:Myframework.Libraries.Common.Constants.Constant">
            <summary>
            Constantes comuns.
            </summary>
        </member>
        <member name="F:Myframework.Libraries.Common.Constants.Constant.Protocol">
            <summary></summary>
        </member>
        <member name="F:Myframework.Libraries.Common.Constants.Constant.SecurityToken">
            <summary></summary>
        </member>
        <member name="F:Myframework.Libraries.Common.Constants.Constant.Authorization">
            <summary></summary>
        </member>
        <member name="F:Myframework.Libraries.Common.Constants.Constant.AuthorizationUser">
            <summary></summary>
        </member>
        <member name="F:Myframework.Libraries.Common.Constants.Constant.MyframeworkLogin">
            <summary></summary>
        </member>
        <member name="F:Myframework.Libraries.Common.Constants.Constant.DefaultErrorMsg">
            <summary>Mensagem de erro padrão.</summary>
        </member>
        <member name="F:Myframework.Libraries.Common.Constants.Constant.SourceIp">
            <summary></summary>
        </member>
        <member name="F:Myframework.Libraries.Common.Constants.Constant.IgnoreRequestResponseLog">
            <summary></summary>
        </member>
        <member name="F:Myframework.Libraries.Common.Constants.Constant.Validations">
            <summary></summary>
        </member>
        <member name="F:Myframework.Libraries.Common.Constants.Constant.Success">
            <summary></summary>
        </member>
        <member name="F:Myframework.Libraries.Common.Constants.Constant.Country">
            <summary></summary>
        </member>
        <member name="F:Myframework.Libraries.Common.Constants.Constant.Bearer">
            <summary>Bearer authorization scheme.</summary>
        </member>
        <member name="F:Myframework.Libraries.Common.Constants.Constant.AcceptLanguage">
            <summary>Accept language header.</summary>
        </member>
        <member name="F:Myframework.Libraries.Common.Constants.Constant.AspNetCoreEnviromentVariable">
            <summary>Variável de ambiente do Asp.NET CORE</summary>
        </member>
        <member name="T:Myframework.Libraries.Common.Criptography.BlowFish">
            <summary>
            Responsável por gerar criptografias do tipo <c>BlowFish</c>.
            </summary>
        </member>
        <member name="M:Myframework.Libraries.Common.Criptography.BlowFish.#ctor(System.String)">
            <summary>
            Construtor para chave string.
            </summary>
            <param name="cipherKey">Chave de criptografia</param>
        </member>
        <member name="M:Myframework.Libraries.Common.Criptography.BlowFish.#ctor(System.Byte[])">
            <summary>
            Construtor para chave de bytes.
            </summary>
            <param name="cipherKey">Chave de criptografia como um array de bytes</param>
        </member>
        <member name="M:Myframework.Libraries.Common.Criptography.BlowFish.Encrypt_CBC(System.String)">
            <summary>
            Criptografa uma string no modo CBC.
            </summary>
            <param name="value">Texto simples para criptografar</param>
            <returns>Texto criptografado com IV associado na frente</returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Criptography.BlowFish.Decrypt_CBC(System.String)">
            <summary>
            Decriptar uma string no modo CBC.
            </summary>
            <param name="value">Texto criptografado com IV associado na frente</param>
            <returns>Texto simples</returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Criptography.BlowFish.Decrypt_CBC(System.Byte[])">
            <summary>
            Decriptar um array de bytes no modo CBC. IV deve ser criado e salvo manualmente.
            </summary>
            <param name="value">Dados criptografados</param>
            <returns>Texto simples</returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Criptography.BlowFish.Decrypt_ECB_From_Base_64(System.String)">
            <summary>
            Decriptar um texto simples no modo ECB em base64.
            </summary>
            <param name="value">Texto simples criptografado</param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Criptography.BlowFish.Encrypt_CBC(System.Byte[])">
            <summary>
            Criptografar um array de bytes no modo CBC. IV deve ser criado e salvo manualmente.
            </summary>
            <param name="pvalue">Array de bytes para criptografar</param>
            <returns>Texto criptografado</returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Criptography.BlowFish.Encrypt_ECB_To_Hex(System.String)">
            <summary>
            Criptografar uma string no modo ECB.
            </summary>
            <param name="value">Texto simples para criptografar como string ascii</param>
            <returns>Valor hexadecimal de dados criptografados</returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Criptography.BlowFish.Encrypt_ECB_To_Base_64(System.String)">
            <summary>
            Criptografar uma string no modo ECB em base64 como ascii.
            </summary>
            <param name="value">Texto simples para criptografar como string ascii</param>
            <returns>Valor base64 de dados criptografados</returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Criptography.BlowFish.Encrypt_ECB_To_String(System.String)">
            <summary>
            Criptografar uma string no modo ECB como ascii.
            </summary>
            <param name="value">Texto simples para criptografar como string ascii</param>
            <returns>Strning value of encrypted data</returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Criptography.BlowFish.Decrypt_ECB(System.String)">
            <summary>
            Descriptografar uma string no modo ECB como ascii.
            </summary>
            <param name="value">Hexadecimal do texto criptografado</param>
            <returns>Texto simples ascii string</returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Criptography.BlowFish.Encrypt_ECB(System.Byte[])">
            <summary>
            Criptografa um arry de bytes no modo ECB.
            </summary>
            <param name="value">Array de bytes</param>
            <returns>Texto criptografado em bytes</returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Criptography.BlowFish.Decrypt_ECB(System.Byte[])">
            <summary>
            Descriptografar um arry de bytes no modo ECB.
            </summary>
            <param name="value">Texto criptografado em  byte array</param>
            <returns>Texto simples em array de bytes</returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Criptography.BlowFish.Encrypt_CTR(System.String)">
            <summary>
            Criptografar uma string (CTR)
            </summary>
            <param name="value">Texto simples para criptografar</param>
            <returns>Texto criptografado</returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Criptography.BlowFish.Decrypt_CTR(System.String)">
            <summary>
            Descriptografar uma string (CTR)
            </summary>
            <param name="value">Texto para descriptografar</param>
            <returns>Texto descriptografado</returns>
        </member>
        <member name="P:Myframework.Libraries.Common.Criptography.BlowFish.IV">
            <summary>
            Vector de inicialização para o modo CBC.
            </summary>
        </member>
        <member name="P:Myframework.Libraries.Common.Criptography.BlowFish.NonStandard">
            <summary>
            Definição se vai utilizar padrão ou não.
            </summary>
        </member>
        <member name="M:Myframework.Libraries.Common.Criptography.BlowFish.SetRandomIV">
            <summary>
            Cria e define um vetor de inicialização aleatória.
            </summary>
            <returns>The random IV</returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Criptography.BlowFish.SetupKey(System.Byte[])">
            <summary>
            Sets up the S-blocks and the key
            </summary>
            <param name="cipherKey">Block cipher key (1-448 bits)</param>
        </member>
        <member name="M:Myframework.Libraries.Common.Criptography.BlowFish.Crypt_ECB(System.Byte[],System.Boolean)">
            <summary>
            Encrypts or decrypts data in ECB mode
            </summary>
            <param name="text">plain/ciphertext</param>
            <param name="decrypt">true to decrypt, false to encrypt</param>
            <returns>(En/De)crypted data</returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Criptography.BlowFish.Crypt_CTR(System.Byte[],System.Int32)">
            <summary>
            Criptografa um arry de bytes no modo CTR.
            </summary>
            <param name="value">Valor em bytes para ser criptografado</param>
            <param name="numThreads">Número de threads</param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Criptography.BlowFish.Crypt_CBC(System.Byte[],System.Boolean)">
            <summary>
            Encrypts or decrypts data in CBC mode
            </summary>
            <param name="text">plain/ciphertext</param>
            <param name="decrypt">true to decrypt, false to encrypt</param>
            <returns>(En/De)crypted data</returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Criptography.BlowFish.XorBlock(System.Byte[]@,System.Byte[])">
            <summary>
            XoR encrypts two 8 bit blocks
            </summary>
            <param name="block">8 bit block 1</param>
            <param name="iv">8 bit block 2</param>
        </member>
        <member name="M:Myframework.Libraries.Common.Criptography.BlowFish.BlockEncrypt(System.Byte[]@)">
            <summary>
            Encrypts a 64 bit block
            </summary>
            <param name="block">The 64 bit block to encrypt</param>
        </member>
        <member name="M:Myframework.Libraries.Common.Criptography.BlowFish.BlockDecrypt(System.Byte[]@)">
            <summary>
            Decrypts a 64 bit block
            </summary>
            <param name="block">The 64 bit block to decrypt</param>
        </member>
        <member name="M:Myframework.Libraries.Common.Criptography.BlowFish.SetBlock(System.Byte[])">
            <summary>
            Splits the block into the two uint values
            </summary>
            <param name="block">the 64 bit block to setup</param>
        </member>
        <member name="M:Myframework.Libraries.Common.Criptography.BlowFish.GetBlock(System.Byte[]@)">
            <summary>
            Converts the two uint values into a 64 bit block
            </summary>
            <param name="block">64 bit buffer to receive the block</param>
        </member>
        <member name="M:Myframework.Libraries.Common.Criptography.BlowFish.encipher">
            <summary>
            Runs the blowfish algorithm (standard 16 rounds)
            </summary>
        </member>
        <member name="M:Myframework.Libraries.Common.Criptography.BlowFish.decipher">
            <summary>
            Runs the blowfish algorithm in reverse (standard 16 rounds)
            </summary>
        </member>
        <member name="M:Myframework.Libraries.Common.Criptography.BlowFish.round(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            one round of the blowfish algorithm
            </summary>
            <param name="a">See spec</param>
            <param name="b">See spec</param>
            <param name="n">See spec</param>
            <returns></returns>
        </member>
        <member name="T:Myframework.Libraries.Common.Criptography.CriptographyBase">
            <summary>
            Base para sustentar a criptografia utilizada nos sitemas de segurança.
            </summary>
        </member>
        <member name="M:Myframework.Libraries.Common.Criptography.CriptographyBase.GenerateSalt(System.Int32)">
            <summary>
            Gera um salt aleatório utilizando a biblioteca <seealso cref="T:System.Security.Cryptography.RandomNumberGenerator"/> baseado no BCryptGenRandom para Windows ou OpenSSL's para diferente de Windows.
            </summary>
            <param name="saltLength">O Salt deve ser, preferencialmente, do tamanho do hash, ex: 32 bytes</param>
            <returns>Array de bytes representando o salt</returns>
        </member>
        <member name="T:Myframework.Libraries.Common.Criptography.HMACSHA1">
            <summary>
            Representa a criptografia baseado em HMAC-SHA1.
            </summary>
        </member>
        <member name="M:Myframework.Libraries.Common.Criptography.HMACSHA1.HashWithSaltSlow(System.String,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Utiliza uma função de hash lenta (slow hash functions) para gerar o hash, com salt, baseado em HMAC-SHA1.
            </summary>
            <param name="value">Texto a ser hasheado</param>
            <param name="salt">Array de bytes representando o salt. O Salt deve ser, preferencialmente, do tamanho do hash, ex: 32 bytes</param>
            <param name="hashByteSize">Tamanho do hash. Ex: 32 bytes</param>
            <param name="iterations">Quantidade de iterações que serão realizadas para gerar o hash. Ideal usar mais de 10 mil</param>
            <returns>Texto rash</returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Criptography.HMACSHA1.Match(System.String,System.String,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Verifica se o hash de um texto confere com o hash indicado.
            </summary>
            <param name="value">Texto a ser hasheado</param>
            <param name="hashValue">Hash para comparação</param>
            <param name="salt">Array de bytes representando o salt</param>
            <param name="hashByteSize">Quantidade de bytes do algoritimo de hash. Ex: HMACSHA1 = 16 bytes</param>
            <param name="iterations">Quantidade de iterações que serão realizadas para gerar o hash</param>
            <returns></returns>
        </member>
        <member name="T:Myframework.Libraries.Common.Criptography.HMACSHA256">
            <summary>
            Representa a criptografia baseado em HMAC-SHA256.
            </summary>
        </member>
        <member name="M:Myframework.Libraries.Common.Criptography.HMACSHA256.HashWithSalt(System.String,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Utiliza uma função de hash lenta (slow hash functions) para gerar o hash, com salt, baseado em HMAC-SHA256.
            </summary>
            <param name="value">Texto a ser hasheado</param>
            <param name="salt">Array de bytes representando o salt. O Salt deve ser, preferencialmente, do tamanho do hash, ex: 32 bytes</param>
            <param name="hashByteSize">Tamanho do hash. Ex: 32 bytes</param>
            <param name="iterations">Quantidade de iterações que serão realizadas para gerar o hash. Ideal usar mais de 10 mil</param>
            <returns>Texto rash</returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Criptography.HMACSHA256.Match(System.String,System.String,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Verifica se o hash de um texto confere com o hash indicado.
            </summary>
            <param name="value">Texto a ser hasheado</param>
            <param name="hashValue">Hash para comparação</param>
            <param name="salt">Array de bytes representando o salt</param>
            <param name="hashByteSize">Quantidade de bytes do algoritimo de hash. Ex: HMACSHA256 = 32 bytes</param>
            <param name="iterations">Quantidade de iterações que serão realizadas para gerar o hash</param>
            <returns></returns>
        </member>
        <member name="T:Myframework.Libraries.Common.Criptography.HMACSHA512">
            <summary>
            Representa a criptografia baseado em HMAC-SHA512.
            </summary>
        </member>
        <member name="M:Myframework.Libraries.Common.Criptography.HMACSHA512.HashWithSalt(System.String,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Utiliza uma função de hash lenta (slow hash functions) para gerar o hash, com salt, baseado em HMAC-SHA512.
            </summary>
            <param name="value">Texto a ser hasheado</param>
            <param name="salt">Array de bytes representando o salt. O Salt deve ser, preferencialmente, do tamanho do hash, ex: 32 bytes</param>
            <param name="hashByteSize">Tamanho do hash. Ex: 32 bytes</param>
            <param name="iterations">Quantidade de iterações que serão realizadas para gerar o hash. Ideal usar mais de 10 mil</param>
            <returns>Texto rash</returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Criptography.HMACSHA512.Match(System.String,System.String,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Verifica se o hash de um texto confere com o hash indicado.
            </summary>
            <param name="value">Texto a ser hasheado</param>
            <param name="hashValue">Hash para comparação</param>
            <param name="salt">Array de bytes representando o salt</param>
            <param name="hashByteSize">Quantidade de bytes do algoritimo de hash. Ex: HMACSHA512 = 64 bytes</param>
            <param name="iterations">Quantidade de iterações que serão realizadas para gerar o hash</param>
            <returns></returns>
        </member>
        <member name="T:Myframework.Libraries.Common.DataAnnotation.RequiredListAttribute">
            <summary>
            Validação para parametro lista requerido.
            Tem que ter pelo menos um elemento.
            </summary>
        </member>
        <member name="M:Myframework.Libraries.Common.DataAnnotation.RequiredListAttribute.#ctor">
            <summary>
            Construtor inicializando a msg ErrorMessage default
            </summary>
        </member>
        <member name="M:Myframework.Libraries.Common.DataAnnotation.RequiredListAttribute.IsValid(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            Método que define se os pré-requesitos foram atendidos
            </summary>
            <param name="value"></param>
            <param name="validationContext"></param>
            <returns></returns>
        </member>
        <member name="T:Myframework.Libraries.Common.Enums.HttpVerb">
            <summary>
            Enumerador para representar os verbos/métodos HTTP.
            </summary>
        </member>
        <member name="F:Myframework.Libraries.Common.Enums.HttpVerb.Get">
            <summary></summary>
        </member>
        <member name="F:Myframework.Libraries.Common.Enums.HttpVerb.Post">
            <summary></summary>
        </member>
        <member name="F:Myframework.Libraries.Common.Enums.HttpVerb.Put">
            <summary></summary>
        </member>
        <member name="F:Myframework.Libraries.Common.Enums.HttpVerb.Delete">
            <summary></summary>
        </member>
        <member name="F:Myframework.Libraries.Common.Enums.HttpVerb.Head">
            <summary></summary>
        </member>
        <member name="F:Myframework.Libraries.Common.Enums.HttpVerb.Patch">
            <summary></summary>
        </member>
        <member name="F:Myframework.Libraries.Common.Enums.HttpVerb.Options">
            <summary></summary>
        </member>
        <member name="T:Myframework.Libraries.Common.Enums.PasswordScore">
            <summary>
            Enumerador para definição de pontuação para senhas.
            </summary>
        </member>
        <member name="F:Myframework.Libraries.Common.Enums.PasswordScore.Blank">
            <summary>Senha em branco equivale a nenhum ponto.</summary>
        </member>
        <member name="F:Myframework.Libraries.Common.Enums.PasswordScore.VeryWeak">
            <summary>Senha muito fraca equivale a um ponto.</summary>
        </member>
        <member name="F:Myframework.Libraries.Common.Enums.PasswordScore.Weak">
            <summary>Senha fraca equivale a dois pontos.</summary>
        </member>
        <member name="F:Myframework.Libraries.Common.Enums.PasswordScore.Good">
            <summary>Senha média equivale a três pontos.</summary>
        </member>
        <member name="F:Myframework.Libraries.Common.Enums.PasswordScore.Strong">
            <summary>Senha forte equivale a quatro pontos.</summary>
        </member>
        <member name="F:Myframework.Libraries.Common.Enums.PasswordScore.VeryStrong">
            <summary>Senha muito forte equivale a cinco pontos.</summary>
        </member>
        <member name="T:Myframework.Libraries.Common.Extensions.DateTimeExtension">
            <summary>
            Extensões para o DateTime.
            </summary>
        </member>
        <member name="M:Myframework.Libraries.Common.Extensions.DateTimeExtension.Clone(System.DateTime)">
            <summary>
            Clona uma data.
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Extensions.DateTimeExtension.SetDay(System.DateTime,System.Int32)">
            <summary>
            Cria uma nova data, baseada na primeira, modificando apenas o dia.
            </summary>
            <param name="date"></param>
            <param name="day"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Extensions.DateTimeExtension.SetMonth(System.DateTime,System.Int32)">
            <summary>
            Cria uma nova data, baseada na primeira, modificando apenas o mês.
            </summary>
            <param name="date"></param>
            <param name="month"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Extensions.DateTimeExtension.SetYear(System.DateTime,System.Int32)">
            <summary>
            Cria uma nova data, baseada na primeira, modificando apenas o ano.
            </summary>
            <param name="date"></param>
            <param name="year"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Extensions.DateTimeExtension.DiffInDays(System.DateTime,System.DateTime)">
            <summary>
            Retorna a diferença, em dias, entre duas datas.
            </summary>
            <param name="date"></param>
            <param name="compareDate"></param>
        </member>
        <member name="M:Myframework.Libraries.Common.Extensions.DateTimeExtension.DiffInMonths(System.DateTime,System.DateTime)">
            <summary>
            Retorna a diferença, em meses, entre duas datas.
            </summary>
            <param name="date"></param>
            <param name="compareDate"></param>
        </member>
        <member name="M:Myframework.Libraries.Common.Extensions.DateTimeExtension.DiffInYears(System.DateTime,System.DateTime)">
            <summary>
            Retorna a diferença, em anos, entre duas datas.
            </summary>
            <param name="date"></param>
            <param name="compareDate"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Extensions.DateTimeExtension.GetLastDayOfMonth(System.DateTime)">
            <summary>
            Retorna o último dia do mês baseado no mês e ano da data informada.
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Extensions.DateTimeExtension.IsLastDayOfMonth(System.DateTime)">
            <summary>
            Indica se a data corresponde ao último dia do mês.
            </summary>
            <param name="date"></param>
        </member>
        <member name="M:Myframework.Libraries.Common.Extensions.DateTimeExtension.GetFirstDayOfMonth(System.DateTime)">
            <summary>
            Retorna o primeiro dia do mês.
            </summary>
            <param name="date">Data</param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Extensions.DateTimeExtension.IsFirstDayOfMonth(System.DateTime)">
            <summary>
            Indica se a data corresponde ao primeiro dia do mês.
            </summary>
            <param name="date">Data</param>
        </member>
        <member name="M:Myframework.Libraries.Common.Extensions.DateTimeExtension.DaysUntilEndOfMonth(System.DateTime,System.Boolean)">
            <summary>
            Retorna a quantidade de dias restantes até o final do mês.
            </summary>
            <param name="date">Data</param>
            <param name="includeOneDay">Incluir mais um dia</param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Extensions.DateTimeExtension.DaysUntilEndOfYear(System.DateTime,System.Boolean)">
            <summary>
            Retorna a quantidade de dias restantes até o final do ano.
            </summary>
            <param name="date">Data</param>
            <param name="includeOneDay">Incluir mais um dia</param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Extensions.DateTimeExtension.GetDateLastHour(System.DateTime)">
            <summary>
            Retorna a data informada, modificando a hora, minuto e segundo para seus valores máximos (23:59:59). Funciona como o DateTime.Today, mas colocando como última hora do dia.
            </summary>
            <param name="date">Data</param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Extensions.DateTimeExtension.CalculateAge(System.DateTime,System.Nullable{System.DateTime})">
            <summary>
            Calcula a idade baseada na data de nascimento, com referencia para a data em que se quer saber a idade.
            </summary>
            <param name="birthDate">Data de nascimento.</param>
            <param name="compareDate">Data a partir da qual será feita a diferença com a data de nascimento para descobrir a idade. Caso não seja passado valor, será assumido o dia atual.</param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Extensions.DateTimeExtension.GreaterThan(System.DateTime,System.DateTime)">
            <summary>
            Verifica se a data é maior que a data de comparação.
            </summary>
            <param name="date"></param>
            <param name="compareDate"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Extensions.DateTimeExtension.GreaterThanOrEqual(System.DateTime,System.DateTime)">
            <summary>
            Verifica se a data é maior ou igual que a data de comparação.
            </summary>
            <param name="date"></param>
            <param name="compareDate"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Extensions.DateTimeExtension.LessThan(System.DateTime,System.DateTime)">
            <summary>
            Verifica se a data é menor que a data de comparação.
            </summary>
            <param name="date"></param>
            <param name="compareDate"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Extensions.DateTimeExtension.LessThanOrEqual(System.DateTime,System.DateTime)">
            <summary>
            Verifica se a data é menor ou igual que a data de comparação.
            </summary>
            <param name="date"></param>
            <param name="compareDate"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Extensions.DateTimeExtension.ItsBetween(System.DateTime,System.DateTime,System.DateTime,System.Boolean)">
            <summary>
            Verifica se a data entre as datas informadas.
            </summary>
            <param name="date"></param>
            <param name="dateStart"></param>
            <param name="dateEnd"></param>
            <param name="inclusive"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Extensions.DateTimeExtension.GetDayOfWeekName(System.DateTime,System.Boolean,System.Globalization.CultureInfo)">
            <summary>
            Obtém o nome do dia da semana da data informada, na cultura informada. Exemplo: segunda-feira, domingo.
            </summary>
            <param name="date"></param>
            <param name="abbreviation">Indica se deve retornar a abreviação do nome (false) ou o nome complete (true).</param>
            <param name="ci">Caso seja nula, será assumia a cultura atual (CultureInfo.CurrentCulture).</param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Extensions.DateTimeExtension.GetMonthName(System.DateTime,System.Boolean,System.Globalization.CultureInfo)">
            <summary>
            Obtém o nome do mês da data informada na cultura informada. Exemplo: janeiro, agosto.
            </summary>
            <param name="date"></param>
            <param name="abbreviation">Indica se deve retornar a abreviação do nome (false) ou o nome complete (true).</param>
            <param name="ci">Caso seja nula, será assumia a cultura atual (CultureInfo.CurrentCulture).</param>
            <returns></returns>
        </member>
        <member name="T:Myframework.Libraries.Common.Extensions.EnumExtension">
            <summary>
            Métodos de extensão para Enum.
            </summary>
        </member>
        <member name="M:Myframework.Libraries.Common.Extensions.EnumExtension.IsDefined(System.Enum)">
            <summary>
            Checa se um enum é valido, dentro da lista deste tipo de enum.
            </summary>
            <param name="enumType"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Extensions.EnumExtension.GetDescription(System.Enum)">
            <summary>
            Obtém o texto do atributo Description que decora o enum.
            </summary>
            <param name="enumType"></param>
        </member>
        <member name="M:Myframework.Libraries.Common.Extensions.EnumExtension.GetAttribute``1(System.Enum)">
            <summary>
            Retorna o atributo de um item de enum.
            </summary>
            <param name="enumType"></param>
            <returns></returns>
        </member>
        <member name="T:Myframework.Libraries.Common.Extensions.ExceptionExtension">
            <summary>
            Extensões para exceções.
            </summary>
        </member>
        <member name="M:Myframework.Libraries.Common.Extensions.ExceptionExtension.CheckIsTimeoutExceptionByMessage(System.Exception)">
            <summary>
            Verifica se a Exception é um timeout pela mensagem de erro.
            </summary>
            <param name="exc"></param>
            <returns></returns>
        </member>
        <member name="T:Myframework.Libraries.Common.Extensions.IEnumerableExtensions">
            <summary>
            Extension para listas.
            </summary>
        </member>
        <member name="M:Myframework.Libraries.Common.Extensions.IEnumerableExtensions.ToPagedList``2(System.Collections.Generic.List{``0},System.Func{``0,``1},System.Int32,System.Int32,System.Boolean)">
            <summary>
            Realiza a paginação sobre a coleção informada e retorna um <c>PagedList</c> com os dados paginados e informações como total de páginas, total de itens e etc.
            </summary>
            <param name="list">A colecao que vai ser paginada</param>
            <param name="order">Expressão para ordenação. Exemplo: (it => it.Id)</param>
            <param name="page">Numero da pagina.</param>
            <param name="itensPerPage">Quantidade de registros por pagina.</param>
            <param name="orderAscending">Ordenação ascendente (true) ou descendente (false).</param>
        </member>
        <member name="M:Myframework.Libraries.Common.Extensions.IEnumerableExtensions.IsNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Verifica se a lista é nula ou não possui item.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Extensions.IEnumerableExtensions.ToString``1(System.Collections.Generic.IEnumerable{``0},System.String,System.Boolean)">
            <summary>
            Concatena as strings da coleção, separando pelo delimitador informado.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <param name="delimiter"></param>
            <param name="ignoreNullValues">Indica se valores null entram (false) ou não (true) para a composição da string.</param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Extensions.IEnumerableExtensions.ToStringWrapped``1(System.Collections.Generic.IEnumerable{``0},System.String,System.String,System.Boolean)">
            <summary>
            Concatena as strings da coleção, colocando o caractere desejado antes e depois de cada valor, dividindo as string pelo delimitador informado. Ex: new List { "val1", "val2", "val3" }, 
            com wrapp "'" (aspas simples) e delimitador "," (virgula), o resultado será: "'val1','val2','val3'".
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <param name="wrappValue">Valor que será adicionado no começo e no final da string.</param>
            <param name="delimiter"></param>
            <param name="ignoreNullValues">Indica se valores null entram (false) ou não (true) para a composição da string.</param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Extensions.IEnumerableExtensions.ToStringWrapped``1(System.Collections.Generic.IEnumerable{``0},System.String,System.String,System.String,System.Boolean)">
            <summary>
            Concatena as strings da coleção, colocando o caractere desejado antes e depois de cada valor, dividindo as string pelo delimitador informado. Ex: new List { "val1", "val2", "val3" }, 
            com wrapp "'" (aspas simples) e delimitador "," (virgula), o resultado será: "'val1','val2','val3'".
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <param name="wrappValueBegin">Valor que será adicionado no começoda string.</param>
            <param name="wrappValueEnd">Valor que será adicionado no no final da string.</param>
            <param name="delimiter"></param>
            <param name="ignoreNullValues">Indica se valores null entram (false) ou não (true) para a composição da string.</param>
            <returns></returns>
        </member>
        <member name="T:Myframework.Libraries.Common.Extensions.IQueryableExtensions">
            <summary>
            Extensões para IQueryable.
            </summary>
        </member>
        <member name="M:Myframework.Libraries.Common.Extensions.IQueryableExtensions.ToPagedList``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Int32,System.Int32,System.Boolean)">
            <summary>
            Realiza a paginação sobre a query informada e retorna um <c>PagedList</c> com os dados paginados e informações como total de páginas, total de itens e etc.
            </summary>
            <param name="query">Query na qual será aplicada a paginação.</param>
            <param name="order">Expressão para ordenação. Exemplo: (it => it.Id)</param>
            <param name="page">Numero da pagina.</param>
            <param name="itensPerPage">Quantidade de registros por pagina.</param>
            <param name="orderAscending">Ordenação ascendente (true) ou descendente (false).</param>
        </member>
        <member name="T:Myframework.Libraries.Common.Extensions.NumericExtensions">
            <summary>
            Extensões para estruturas numéricas.
            </summary>
        </member>
        <member name="M:Myframework.Libraries.Common.Extensions.NumericExtensions.ItsBetween(System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Verifica se um número está entre os outros números informados.
            </summary>
            <param name="number"></param>
            <param name="numberStart"></param>
            <param name="numberEnd"></param>
            <param name="inclusive">Considerar inclusive os números finais ([maior ou igual] e [menor ou igual]) ou não ([menor] e [maior]).</param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Extensions.NumericExtensions.ItsBetween(System.Int16,System.Int16,System.Int16,System.Boolean)">
            <summary>
            Verifica se um número está entre os outros números informados.
            </summary>
            <param name="number"></param>
            <param name="numberStart"></param>
            <param name="numberEnd"></param>
            <param name="inclusive">Considerar inclusive os números finais ([maior ou igual] e [menor ou igual]) ou não ([menor] e [maior]).</param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Extensions.NumericExtensions.ItsBetween(System.Int64,System.Int64,System.Int64,System.Boolean)">
            <summary>
            Verifica se um número está entre os outros números informados.
            </summary>
            <param name="number"></param>
            <param name="numberStart"></param>
            <param name="numberEnd"></param>
            <param name="inclusive">Considerar inclusive os números finais ([maior ou igual] e [menor ou igual]) ou não ([menor] e [maior]).</param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Extensions.NumericExtensions.ItsBetween(System.Byte,System.Byte,System.Byte,System.Boolean)">
            <summary>
            Verifica se um número está entre os outros números informados.
            </summary>
            <param name="number"></param>
            <param name="numberStart"></param>
            <param name="numberEnd"></param>
            <param name="inclusive">Considerar inclusive os números finais ([maior ou igual] e [menor ou igual]) ou não ([menor] e [maior]).</param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Extensions.NumericExtensions.ItsBetween(System.Decimal,System.Decimal,System.Decimal,System.Boolean)">
            <summary>
            Verifica se um número está entre os outros números informados.
            </summary>
            <param name="number"></param>
            <param name="numberStart"></param>
            <param name="numberEnd"></param>
            <param name="inclusive">Considerar inclusive os números finais ([maior ou igual] e [menor ou igual]) ou não ([menor] e [maior]).</param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Extensions.NumericExtensions.ItsBetween(System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
            Verifica se um número está entre os outros números informados.
            </summary>
            <param name="number"></param>
            <param name="numberStart"></param>
            <param name="numberEnd"></param>
            <param name="inclusive">Considerar inclusive os números finais ([maior ou igual] e [menor ou igual]) ou não ([menor] e [maior]).</param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Extensions.NumericExtensions.ItsBetween(System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            Verifica se um número está entre os outros números informados.
            </summary>
            <param name="number"></param>
            <param name="numberStart"></param>
            <param name="numberEnd"></param>
            <param name="inclusive">Considerar inclusive os números finais ([maior ou igual] e [menor ou igual]) ou não ([menor] e [maior]).</param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Extensions.NumericExtensions.GreaterThan``1(``0,``0)">
            <summary>
            Verifica se um valor é maior que o outro.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value1"></param>
            <param name="value2"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Extensions.NumericExtensions.GreaterThanOrEqual``1(``0,``0)">
            <summary>
            Verifica se um valor é maior ou igual a outro.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value1"></param>
            <param name="value2"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Extensions.NumericExtensions.LessThan``1(``0,``0)">
            <summary>
            Verifica se um valor é menor que o outro.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value1"></param>
            <param name="value2"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Extensions.NumericExtensions.LessThanOrEqual``1(``0,``0)">
            <summary>
            Verifica se um valor é menor ou igual a outro.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value1"></param>
            <param name="value2"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Extensions.NumericExtensions.TruncateDecimalPlaces(System.Decimal,System.Int32)">
            <summary>
            Baseado na função Math.Truncate, trunca o valor com a quantidade de casas decimais desejadas, sem arredondar.
            </summary>
            <param name="number"></param>
            <param name="decimalPlaces"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Extensions.NumericExtensions.TruncateDecimalPlaces(System.Double,System.Int32)">
            <summary>
            Baseado na função Math.Truncate, trunca o valor com a quantidade de casas decimais desejadas, sem arredondar.
            </summary>
            <param name="number"></param>
            <param name="decimalPlaces"></param>
            <returns></returns>
        </member>
        <member name="T:Myframework.Libraries.Common.Extensions.ObjectExtension">
            <summary>
            Extensões para objetos.
            </summary>
        </member>
        <member name="M:Myframework.Libraries.Common.Extensions.ObjectExtension.ToQueryString(System.Object)">
            <summary>
            Retorna uma QueryString baseada nas propriedades do objeto informado.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Extensions.ObjectExtension.ToQueryStringAsync(System.Object)">
            <summary>
            Retorna uma QueryString baseada nas propriedades do objeto informado.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Extensions.ObjectExtension.ToDictionary(System.Object)">
            <summary>
            Transforma o objeto em um dicionário com as propriedades (como chave) e seus valores.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Extensions.ObjectExtension.IsNull(System.Object)">
            <summary>Checa se o objeto é nulo.</summary>
        </member>
        <member name="M:Myframework.Libraries.Common.Extensions.ObjectExtension.IsNotNull(System.Object)">
            <summary>Checa se o objeto não é nulo.</summary>
        </member>
        <member name="T:Myframework.Libraries.Common.Extensions.StreamExtension">
            <summary>
            Extensões para stream.
            </summary>
        </member>
        <member name="M:Myframework.Libraries.Common.Extensions.StreamExtension.ToByteArray(System.IO.Stream)">
            <summary>
            Retorna um array de bytes a partir de um Stream.
            </summary>
            <param name="stream">Stream que será convertido em array de bytes.</param>
            <returns></returns>
        </member>
        <member name="T:Myframework.Libraries.Common.Extensions.StringExtension">
            <summary>
            Extensões para string.
            </summary>
        </member>
        <member name="M:Myframework.Libraries.Common.Extensions.StringExtension.IsNullOrWhiteSpace(System.String)">
            <summary>
            Verifica se a string é nula ou está em branco usando a função string.IsNullOrWhiteSpace.
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Extensions.StringExtension.IsEmpty(System.String,System.Boolean)">
            <summary>
            Verifica se a string está vazia.
            </summary>
            <param name="str"></param>
            <param name="removeWhiteSpacesToCheck">Indica se deve remover ou não espaços em branco.</param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Extensions.StringExtension.SubstringIfMaxLength(System.String,System.Int32)">
            <summary>
            Retorna a string respeitando o número máximo de caracteres, ou seja, caso a string tenha mais caracteres do que o máximo informado, será usada a função string.Substring, caso contrário será retornada a string sem alterações.
            </summary>
            <param name="str"></param>
            <param name="maxLength">Máximo de caracteres permitidos.</param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Extensions.StringExtension.UpperCaseFirstChar(System.String)">
            <summary>
            Coloca a primeira letra em maiúscula.
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Extensions.StringExtension.UpperCaseFirstCharEachWord(System.String)">
            <summary>
            Coloca a primeira letra de cada palavra em maiúscula.
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Extensions.StringExtension.LowerCaseFirstChar(System.String)">
            <summary>
            Coloca a primeira letra em minúsculo.
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Extensions.StringExtension.LowerCaseFirstCharEachWord(System.String)">
            <summary>
            Coloca a primeira letra de cada palavra em minúsculo.
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Extensions.StringExtension.RemoveLastChar(System.String)">
            <summary>
            Remove o último caractere.
            </summary>
            <param name="str"></param>
        </member>
        <member name="M:Myframework.Libraries.Common.Extensions.StringExtension.RemoveLastChar(System.String,System.Char,System.Boolean)">
            <summary>
            Remove último caractere informado.
            </summary>
            <param name="str"></param>
            <param name="character"></param>
            <param name="caseInsensitive"></param>
        </member>
        <member name="M:Myframework.Libraries.Common.Extensions.StringExtension.NormalizeSpaces(System.String)">
            <summary>
            Normaliza muitos espaços em branco consecutivos em apenas um. Isso inclui a substituição de "\t" por " " (espaço em branco).
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Extensions.StringExtension.WordCount(System.String)">
            <summary>
            Retorna quantidade de palavras na string.
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Extensions.StringExtension.RemoveLastWord(System.String)">
            <summary>
            Remove a ultima palavra da string.
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Extensions.StringExtension.RemoveLastOccurrenceOfWord(System.String,System.String,System.Boolean)">
            <summary>
            Remove a última ocorrência da palavra informada.
            </summary>
            <param name="str"></param>
            <param name="word"></param>
            <param name="caseInsensitive"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Extensions.StringExtension.IsNumber(System.String)">
            <summary>
            Verifica se uma string pode ser convertida em um número.
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Extensions.StringExtension.IsDecimal(System.String)">
            <summary>
            Verifica se a string é um número decimal.
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Extensions.StringExtension.IsDatetime(System.String)">
            <summary>
            Verifica se a string é um datetime.
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Extensions.StringExtension.JoinListInSingleString(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            Concatena uma lista de strings em uma única string, utilizando o delimitador indicado.
            </summary>
            <param name="lista"></param>
            <param name="delimiter"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Extensions.StringExtension.HasNumberChars(System.String)">
            <summary>
            Verifica se a string possui número.
            </summary>
            <param name="str"></param>
            <param name="regexOption"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Extensions.StringExtension.HasUppercaseChar(System.String)">
            <summary>
            Verifica se a string possui ao menos uma letra maiuscula.
            </summary>
            <param name="str"></param>
            <param name="regexOption"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Extensions.StringExtension.HasLowercaseChar(System.String)">
            <summary>
            Verifica se a string possui ao menos uma letra minuscula.
            </summary>
            <param name="str"></param>
            <param name="regexOption"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Extensions.StringExtension.HasLetter(System.String)">
            <summary>
            Verifica se a string possui ao menos uma letra.
            </summary>
            <param name="str"></param>
            <param name="regexOption"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Extensions.StringExtension.HasOnlyNumbers(System.String)">
            <summary>
            Verifica se a string possui somente números.
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Extensions.StringExtension.HasOnlyLetters(System.String)">
            <summary>
            Verifica se a string possui somente letras.
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Extensions.StringExtension.RemoveNonNumeric(System.String)">
            <summary>
            Remove caracteres não numéricos.
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Extensions.StringExtension.CompareCaseInsensitive(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Compara a string com outra, ignorando acentos e caracterres especiais.
            </summary>
            <param name="str"></param>
            <param name="compareValue"></param>
            <param name="removeWhiteSpace"></param>
            <param name="removeSpecialCharacters"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Extensions.StringExtension.RemoveBRPrepositions(System.String,System.Boolean)">
            <summary>
            Remove preposições de um texto.
            </summary>
            <param name="str"></param>
            <param name="removePrepositionFromBeginAndEnd">Indica se deve remover preposições do começo e fim da frase.</param>        
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Extensions.StringExtension.RemoveSpecialCharacters(System.String)">
            <summary>
            Remove caracteres especiais, inclusive acentuação.
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Extensions.StringExtension.RemoveAccents(System.String)">
            <summary>
            Remove os acentos do texto.
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Extensions.StringExtension.ContainSimilarity(System.String,System.String)">
            <summary>
            Método para comparar strings por similaridade até 2 letras divergentes considerado similar.
            </summary>
            <param name="str">string atual</param>
            <param name="target">string comparativa</param>
            <returns>True caso seja similar</returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Extensions.StringExtension.TryParseToDateTime(System.String)">
            <summary>
            Tenta realizar o parse da string para data, caso não consiga retornará null.
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Extensions.StringExtension.TryParseToInt(System.String)">
            <summary>
            Tenta realizar o parse da string para inteiro, caso não consiga retornará null.
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Extensions.StringExtension.TryParseToShort(System.String)">
            <summary>
            Tenta realizar o parse da string para short, caso não consiga retornará null.
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Extensions.StringExtension.TryParseToLong(System.String)">
            <summary>
            Tenta realizar o parse da string para long, caso não consiga retornará null.
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Extensions.StringExtension.TryParseToByte(System.String)">
            <summary>
            Tenta realizar o parse da string para byte, caso não consiga retornará null.
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Extensions.StringExtension.TryParseToDecimal(System.String)">
            <summary>
            Tenta realizar o parse da string para decimal, caso não consiga retornará null.
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Extensions.StringExtension.TryParseToFloat(System.String)">
            <summary>
            Tenta realizar o parse da string para float, caso não consiga retornará null.
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Extensions.StringExtension.TryParseToDouble(System.String)">
            <summary>
            Tenta realizar o parse da string para double, caso não consiga retornará null.
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Extensions.StringExtension.CountLetters(System.String)">
            <summary>
            Retorna a quantidade de letras presentes na string.
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Extensions.StringExtension.CountUpperCaseChars(System.String)">
            <summary>
            Retorna a quantidade de letras maiúsculas presentes na string.
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Extensions.StringExtension.CountLowerCaseChars(System.String)">
            <summary>
            Retorna a quantidade de letras minúsculas presentes na string.
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Extensions.StringExtension.CountNumbers(System.String)">
            <summary>
            Retorna a quantidade de números presentes na string.
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Extensions.StringExtension.CountChars(System.String,System.Char)">
            <summary>
            Retorna a quantidade de carecteres especificados presentes na string.
            </summary>
            <param name="str"></param>
            <param name="character"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Extensions.StringExtension.CountChars(System.String,System.Char[])">
            <summary>
            Retorna a quantidade de carecteres especificados presentes na string.
            </summary>
            <param name="str"></param>
            <param name="characters"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Extensions.StringExtension.CountChars(System.String,System.Collections.Generic.List{System.Char})">
            <summary>
            Retorna a quantidade de carecteres especificados presentes na string.
            </summary>
            <param name="str"></param>
            <param name="characters"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Extensions.StringExtension.CountRepeatedChars(System.String)">
            <summary>
            Count repeated chars.
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Extensions.StringExtension.GetRepeatedChars(System.String)">
            <summary>
            Get repeated chars.
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Extensions.StringExtension.GetConsecutiveChars(System.String)">
            <summary>
            Retorna caracteres consecutivos na string.
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Extensions.StringExtension.GetConsecutiveUpperCaseChars(System.String)">
            <summary>
            Retorna caracteres maiúsculos consecutivos na string.
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Extensions.StringExtension.GetConsecutiveLowerCaseChars(System.String)">
            <summary>
            Retorna caracteres minúsculos consecutivos na string.
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Extensions.StringExtension.GetConsecutiveNumbersChars(System.String)">
            <summary>
            Retorna caracteres, do tipo número, consecutivos na string.
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Extensions.StringExtension.GetConsecutiveCharsWithCustomRule(System.String,System.Func{System.Char,System.Boolean})">
            <summary>
            Retorna caracteres consecutivos usando a função indicada para determinar se um char é consecutivo do outro ou não.
            </summary>
            <param name="str"></param>
            <param name="consecutiveRuleFunc"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Extensions.StringExtension.GetSequentialLettersChars(System.String,System.Boolean)">
            <summary>
            Retorna caracteres, do tipo letra, que são sequência na string. Ex: abcSAASDA => sequencial a-b-c.
            </summary>
            <param name="str"></param>
            <param name="caseInsensitive">Indica se deve levar em consideraçõa letras maiúsculas e minúsculas (false) ou não (true). Padrão: não levar em conta.</param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Extensions.StringExtension.GetSequentialNumbersChars(System.String)">
            <summary>
            Retorna caracteres, do tipo número, que são sequência na string. Ex: abcSAASDA => sequencial a-b-c.
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Extensions.StringExtension.GetSequentialCharsWithCustomRule(System.String,System.Func{System.Char,System.Char,System.Boolean})">
            <summary>
            Retorna caracteres sequenciais usando a função indicada para determinar se um char é sequência do outro ou não.
            </summary>
            <param name="str"></param>
            <param name="isSequentialFunc"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Extensions.StringExtension.CountConsecutiveChars(System.String)">
            <summary>
            Retorna quantidade de caracteres consecutivos na string.
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Extensions.StringExtension.CountConsecutiveChar(System.String,System.Char)">
            <summary>
            Retorna quantidade do caracter consecutivos na string.
            </summary>
            <param name="str"></param>
            <param name="character"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Extensions.StringExtension.CountConsecutiveUpperCaseChars(System.String)">
            <summary>
            Retorna caracteres maiúsculos consecutivos na string.
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Extensions.StringExtension.CountConsecutiveLowerCaseChars(System.String)">
            <summary>
            Retorna quantidade de caracteres minúsculos consecutivos na string.
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Extensions.StringExtension.CountConsecutiveNumbersChars(System.String)">
            <summary>
            Retorna a quantidade de caracteres, do tipo número, consecutivos na string.
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Extensions.StringExtension.CountSequentialLettersChars(System.String,System.Boolean)">
            <summary>
            Retorna a quantidade de caracteres, do tipo letra, que são sequência na string. Ex: abcSAASDA => sequencial a-b-c.
            </summary>
            <param name="str"></param>
            <param name="caseInsensitive">Indica se deve levar em consideraçõa letras maiúsculas e minúsculas (false) ou não (true). Padrão: não levar em conta.</param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Extensions.StringExtension.CountSequentialNumbersChars(System.String)">
            <summary>
            Retorna a quantidade de caracteres, do tipo número, que são sequência na string. Ex: abcSAASDA => sequencial a-b-c.
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Extensions.StringExtension.IsSequentialLetterOfChar(System.Char,System.Char,System.Boolean)">
            <summary>
            Indica se o caractere, do tipo letra, é sequência do caractere anterior, também do tipo letra.
            </summary>
            <param name="currentChar">Caracterer que deveria ser sequencia do outro caracterer (compareChar).</param>
            <param name="compareChar"></param>
            <param name="caseInsensitive">Indica se deve levar em consideraçõa letras maiúsculas e minúsculas (false) ou não (true). Padrão: não levar em conta.</param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Extensions.StringExtension.IsSequentialNumberOfChar(System.Char,System.Char)">
            <summary>
            Indica se o caractere, do tipo número, é sequência do caractere anterior, também do tipo número.
            </summary>
            <param name="currentChar">Caracterer que deveria ser sequencia do outro caracterer (compareChar).</param>
            <param name="compareChar"></param>
            <returns></returns>
        </member>
        <member name="T:Myframework.Libraries.Common.Extensions.TypeExtensions">
            <summary>
            Extensões para Type.
            </summary>
        </member>
        <member name="M:Myframework.Libraries.Common.Extensions.TypeExtensions.IsSubclassOfRawGeneric(System.Type,System.Type)">
            <summary>
            Verifica se o tipo é uma subclasse de um genérico.
            </summary>
            <param name="type"></param>
            <param name="baseType"></param>
            <returns></returns>
        </member>
        <member name="T:Myframework.Libraries.Common.Helpers.CnpjHelper">
            <summary>
            Métodos úteis para CNPJ.
            </summary>
        </member>
        <member name="M:Myframework.Libraries.Common.Helpers.CnpjHelper.IsCnpjValid(System.String,System.Boolean)">
            <summary>
            Verifica se a string é um CNPJ.
            </summary>
            <param name="cnpj"></param>
            <param name="validateFormat"></param>
            <returns></returns>
        </member>
        <member name="T:Myframework.Libraries.Common.Helpers.CpfHelper">
            <summary>
            Métodos úteis para CPF.
            </summary>
        </member>
        <member name="M:Myframework.Libraries.Common.Helpers.CpfHelper.GenerateCpf">
            <summary>
            Gera um CPF válido.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Helpers.CpfHelper.IsCpfValid(System.String,System.Boolean)">
            <summary>
            Verifica se um CPF é válido.
            </summary>
            <param name="cpf"></param>
            <param name="validateFormat"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Helpers.CultureHelper.CheckCultureByCode(System.String)">
            <summary>
            Verifica pelo código da cultura, se ela é válida
            </summary>
            <param name="code"></param>
            <returns></returns>
        </member>
        <member name="T:Myframework.Libraries.Common.Helpers.DateTimeHelper">
            <summary>
            Métodos úteis para datas.
            </summary>
        </member>
        <member name="M:Myframework.Libraries.Common.Helpers.DateTimeHelper.IsValidDay(System.Int32,System.Int32,System.Int32)">
            <summary>
            Verifica se o dia é válido para o mês/ano informados.
            </summary>
            <param name="day"></param>
            <param name="month"></param>
            <param name="year"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Helpers.DateTimeHelper.IsValidMonth(System.Int32)">
            <summary>
            Veriica se é um mês valido.
            </summary>
            <param name="month"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Helpers.DateTimeHelper.IsValidYear(System.Int32)">
            <summary>
            Verifica se é um ano válido.
            </summary>
            <param name="year"></param>
            <returns></returns>
        </member>
        <member name="T:Myframework.Libraries.Common.Helpers.EmailHelper">
            <summary>
            Métodos úteis para email.
            </summary>
        </member>
        <member name="M:Myframework.Libraries.Common.Helpers.EmailHelper.Generate(System.String,System.String)">
            <summary>
            Gera um e-mail randômico usando os parâmetros de criação especificados.
            </summary>
            <param name="sufixo">Sufixo do e-mail ("@abc.com").</param>
            <param name="chars">Caracteres que disponíveis para gerar a parte randômica do e-mail.</param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Helpers.EmailHelper.IsValidEmail(System.String)">
            <summary>
            Retorna a validação de um e-mail. Caso o valor seja vazio, nulo ou tenha apenas espaços é retornado falso.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Myframework.Libraries.Common.Helpers.EnumHelper">
            <summary>
            Métodos utiliários para enumeradores.
            </summary>
        </member>
        <member name="M:Myframework.Libraries.Common.Helpers.EnumHelper.GetEnumItems``1">
            <summary>
            Retorna todos os items de um enum.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Helpers.EnumHelper.GetEnumByDescription``1(System.String)">
            <summary>
            Retorna o enum que possuir o atributo Description com o texto informado.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="descriptionAttrText">Texto que está definido no aributo Description do enum.</param>
            <returns></returns>
        </member>
        <member name="T:Myframework.Libraries.Common.Helpers.JsonHelper">
            <summary>
            Métodos úteis para Json.
            </summary>
        </member>
        <member name="M:Myframework.Libraries.Common.Helpers.JsonHelper.RemoveSensitiveData(System.String,System.Collections.Generic.List{System.String},System.String)">
            <summary>
            Remove dados sensíveis do json, trocando-os pela máscara informada.
            </summary>
            <param name="json"></param>
            <param name="propriedadesSensitive">Propriedades que devem ser trocadas pela máscara.</param>
            <param name="mask">Texto que será assumido no lugar das propriedades sensíveis.</param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Helpers.JsonHelper.CheckIfJsonIsValid(System.String)">
            <summary>
            Verifica se o json é válido.
            </summary>
            <param name="json"></param>
            <returns></returns>
        </member>
        <member name="T:Myframework.Libraries.Common.Helpers.MasksHelper">
            <summary>
            Métodos úteis para máscaras.
            </summary>
        </member>
        <member name="M:Myframework.Libraries.Common.Helpers.MasksHelper.MaskCnpj(System.String,System.String)">
            <summary>
            Formata um CNPJ com a máscara informada. Caso o valor seja vazio, nulo, tenha apenas espaços ou seja um CNPJ inválido é retornado o mesmo valor sem aplicação da máscara.
            </summary>
            <param name="cnpj"></param>
            <param name="mask"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Helpers.MasksHelper.MaskCpf(System.String,System.String)">
            <summary>
            Formata um CPF com a máscara informada. Caso o valor seja vazio, nulo, tenha apenas espaços ou seja um CPF inválido é retornado o mesmo valor sem aplicação da máscara.
            </summary>
            <param name="cpf"></param>
            <param name="mask"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Helpers.MasksHelper.MaskDeclaracaoNascidoVivo(System.String,System.String)">
            <summary>
            Formata uma declaração de nascido vido com a máscara informada. Caso o valor seja vazio, nulo, tenha apenas espaços ou seja inválido é retornado o mesmo valor sem aplicação da máscara.
            </summary>
            <param name="declaracao"></param>
            <param name="mask"></param>
            <returns></returns>
        </member>
        <member name="T:Myframework.Libraries.Common.Helpers.RandomHelper">
            <summary>
            Métodos úteis para randomicos.
            </summary>
        </member>
        <member name="M:Myframework.Libraries.Common.Helpers.RandomHelper.RandomString(System.Int32,System.String)">
            <summary>
            Retorna um texto randômico usando os caracteres especificados.
            </summary>
            <param name="length">Tamanho do texto randômico.</param>
            <param name="chars">Caracteres permitidos para o randômico.</param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Helpers.RandomHelper.RandomByte(System.Byte,System.Byte,System.Boolean)">
            <summary>
            Cria um randomico para byte.
            </summary>
            <param name="minValue"></param>
            <param name="maxValue"></param>
            <param name="inclusiveMaxValue">Indica se o "maxValue" deve ser inclusivo ou exclusivo.</param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Helpers.RandomHelper.RandomShort(System.Int16,System.Int16,System.Boolean)">
            <summary>
            Cria um randomico para short.
            </summary>
            <param name="minValue"></param>
            <param name="maxValue"></param>
            <param name="inclusiveMaxValue">Indica se o "maxValue" deve ser inclusivo ou exclusivo.</param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Helpers.RandomHelper.RandomInt(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Cria um randomico para int.
            </summary>
            <param name="minValue"></param>
            <param name="maxValue"></param>
            <param name="inclusiveMaxValue">Indica se o "maxValue" deve ser inclusivo ou exclusivo.</param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Helpers.RandomHelper.RandomDouble">
            <summary>
            Cria um randomico para int.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Helpers.RandomHelper.RandomFloat">
            <summary>
            Cria um randomico para float.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Helpers.RandomHelper.RandomDateTime(System.Int32)">
            <summary>
            Cria um randomico para data.
            </summary>
            <param name="startYear"></param>
            <returns></returns>
        </member>
        <member name="T:Myframework.Libraries.Common.Helpers.ReflectionHelper">
            <summary>
            Métodos úteis para relection.
            </summary>
        </member>
        <member name="M:Myframework.Libraries.Common.Helpers.ReflectionHelper.GetDescription``1">
            <summary>
            Retorna o text do atributo Description para um tipo.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Helpers.ReflectionHelper.GetDescription``1(System.String)">
            <summary>
            Retorna o text do atributo Description de uma propriedade específica.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Helpers.ReflectionHelper.GetDescriptionAttribute``1(System.String)">
            <summary>
            Retorna o atributo Description de uma propriedade específica.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Helpers.ReflectionHelper.HasAttribute``2">
            <summary>
            Verifica se um tipo possui um atributo.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TAttribute"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Helpers.ReflectionHelper.HasAttribute``2(System.String)">
            <summary>
            Verifica se um tipo possui um atributo na propriedade específica.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TAttribute"></typeparam>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Helpers.ReflectionHelper.GetAttribute``2(System.String)">
            <summary>
            Retorna o atributo de uma propriedade.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TAttribute"></typeparam>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Helpers.ReflectionHelper.GetProperties``1">
            <summary>
            Retorna as propriedades do tipo.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Helpers.ReflectionHelper.SetPropertyValue``1(``0,System.String,System.Object)">
            <summary>
            Atualiza a propriedade de um objeto.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <param name="propertyName"></param>
            <param name="newValue"></param>
        </member>
        <member name="M:Myframework.Libraries.Common.Helpers.ReflectionHelper.GetPropertyValue``1(``0,System.String)">
            <summary>
            Retorna o valor da propriedade de um objeto.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <param name="propertyName"></param>
        </member>
        <member name="M:Myframework.Libraries.Common.Helpers.ReflectionHelper.SetNonPublicField``1(``0,System.String,System.Object)">
            <summary>
            Atualiza um campo não público com o novo valor.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <param name="fieldName"></param>
            <param name="newValue"></param>
        </member>
        <member name="M:Myframework.Libraries.Common.Helpers.ReflectionHelper.GetNonPublicField``1(``0,System.String)">
            <summary>
            Retorna o valor de um campo não público com.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <param name="fieldName"></param>
        </member>
        <member name="T:Myframework.Libraries.Common.Helpers.StringHelper">
            <summary>
            Métodos úteis para string.
            </summary>
        </member>
        <member name="T:Myframework.Libraries.Common.Helpers.TestHelper">
            <summary>
            Métodos úteis para testes.
            </summary>
        </member>
        <member name="M:Myframework.Libraries.Common.Helpers.TestHelper.MockObject``1(``0,System.Type[])">
            <summary>
            Mocka um objeto com valores aleatórios.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="t"></param>
            <param name="ignoreTypes"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Helpers.TestHelper.CreateMapsAsserts``1(``0,System.String,System.String)">
            <summary>
            Cria os asserts para testes de mapeamento/conversão entre classes.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="t"></param>
            <param name="nome"></param>
            <param name="nomeComp"></param>
            <returns></returns>
        </member>
        <member name="T:Myframework.Libraries.Common.Helpers.UnitOfMeasureHelper">
            <summary>
            Métodos úteis para unidades de medidas.
            </summary>
        </member>
        <member name="M:Myframework.Libraries.Common.Helpers.UnitOfMeasureHelper.ConvertMinuteToMillisecond(System.Int64)">
            <summary>
            Converter minuto para millesegundos
            </summary>
            <param name="minute"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Helpers.UnitOfMeasureHelper.ConvertMmoLToMgDL(System.Double)">
            <summary>
            
            </summary>
            <param name="mmoL"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Helpers.UnitOfMeasureHelper.ConvertMgDLToMmoL(System.Double)">
            <summary>
            
            </summary>
            <param name="mgDL"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Helpers.UnitOfMeasureHelper.DivideUnitOfMeasurePerVariable(System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="unitOfMeasureSource"></param>
            <param name="variableForCalculation"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Helpers.UnitOfMeasureHelper.MultiplyUnitOfMeasurePerVariable(System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="unitOfMeasureSource"></param>
            <param name="variableForCalculation"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Helpers.UnitOfMeasureHelper.ConvertMicroliterToBase10(System.Double)">
            <summary>
            
            </summary>
            <param name="microliter"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Helpers.UnitOfMeasureHelper.ConvertBase10Microliter(System.Double)">
            <summary>
            
            </summary>
            <param name="base10"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Helpers.UnitOfMeasureHelper.ConvertGramPerLiterToGramPerDeciliter(System.Double)">
            <summary>
            
            </summary>
            <param name="gramPerLiter"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Helpers.UnitOfMeasureHelper.ConvertGramPerLiterToMilligramsPerDeciliter(System.Double)">
            <summary>
            
            </summary>
            <param name="gramPerLiter"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Helpers.UnitOfMeasureHelper.ConvertMilligramPerLiterToMiliGramPerDeciliter(System.Double)">
            <summary>
            
            </summary>
            <param name="milligramPerLiter"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Helpers.UnitOfMeasureHelper.ConvertLiterPerLiterToPercentage(System.Double)">
            <summary>
            
            </summary>
            <param name="literPerLiter"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Helpers.UnitOfMeasureHelper.ConvertMinuteToMillisecond(System.Int32)">
            <summary>
            
            </summary>
            <param name="minute"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Helpers.UnitOfMeasureHelper.ConvertCentimetersToMeters(System.Double)">
            <summary>
            
            </summary>
            <param name="centimeters"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Helpers.UnitOfMeasureHelper.ConvertMetersToCentimeters(System.Double)">
            <summary>
            
            </summary>
            <param name="meters"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Helpers.UnitOfMeasureHelper.ConvertGramsToKilograms(System.Double)">
            <summary>
            
            </summary>
            <param name="grams"></param>
            <returns>kilograms</returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Helpers.UnitOfMeasureHelper.ConvertKilogramsToGrams(System.Double)">
            <summary>
            
            </summary>
            <param name="kilograms"></param>
            <returns>grams</returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Helpers.UnitOfMeasureHelper.ConvertLactateMmoLToMgDL(System.Double)">
            <summary>
            
            </summary>
            <param name="mmoL"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Helpers.UnitOfMeasureHelper.CalculateBMI(System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>
            Calcula o indice de massa corporal (IMC)
            </summary>
            <param name="heigth">Altura em metros</param>
            <param name="weight">Peso em kg</param>
            <returns></returns>
        </member>
        <member name="T:Myframework.Libraries.Common.Helpers.XmlHelper">
            <summary>
            Métodos úteis para XML.
            </summary>
        </member>
        <member name="T:Myframework.Libraries.Common.Pagination.PagedList`1">
            <summary>
            Classe para representar uma paginação.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Myframework.Libraries.Common.Pagination.PagedList`1.#ctor(System.Collections.Generic.List{`0},System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="itens"></param>
            <param name="page"></param>
            <param name="totalItens"></param>
            <param name="itensPerPage"></param>
        </member>
        <member name="P:Myframework.Libraries.Common.Pagination.PagedList`1.Itens">
            <summary>
            Itens paginados.
            </summary>
        </member>
        <member name="P:Myframework.Libraries.Common.Pagination.PagedList`1.Page">
            <summary>
            Página atual.
            </summary>
        </member>
        <member name="P:Myframework.Libraries.Common.Pagination.PagedList`1.ItensPerPage">
            <summary>
            Itens por página.
            </summary>
        </member>
        <member name="P:Myframework.Libraries.Common.Pagination.PagedList`1.TotalItens">
            <summary>
            Total de itens para a consulta.
            </summary>
        </member>
        <member name="P:Myframework.Libraries.Common.Pagination.PagedList`1.TotalPages">
            <summary>
            Total de páginas.
            </summary>
        </member>
        <member name="T:Myframework.Libraries.Common.Pagination.PaggingCalculation">
            <summary>
            Classe que realiza cálculo de paginação para criação de componentes de paginação.
            </summary>
        </member>
        <member name="M:Myframework.Libraries.Common.Pagination.PaggingCalculation.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Construtor padrão.
            Realiza cálculos da paginação.
            </summary>
            <param name="page">Página atual/selecionada.</param>
            <param name="totalItems">Quantidade total de itens.</param>
            <param name="itemsPerPage">Quantidade de itens por página.</param>
        </member>
        <member name="P:Myframework.Libraries.Common.Pagination.PaggingCalculation.Page">
            <summary>Página atual/selecionada.</summary>
        </member>
        <member name="P:Myframework.Libraries.Common.Pagination.PaggingCalculation.TotalPages">
            <summary>Quantidade de páginas.</summary>
        </member>
        <member name="P:Myframework.Libraries.Common.Pagination.PaggingCalculation.TotalItens">
            <summary>Quantidade total de items existentes.</summary>
        </member>
        <member name="P:Myframework.Libraries.Common.Pagination.PaggingCalculation.ItensPerPage">
            <summary>Quantidade de items que serão exibidos em uma página.</summary>
        </member>
        <member name="T:Myframework.Libraries.Common.Pagination.PaggingFrontCalculation">
            <summary>
            Classe que realiza cálculo de paginação para criação de componentes de paginação.
            </summary>
        </member>
        <member name="M:Myframework.Libraries.Common.Pagination.PaggingFrontCalculation.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Construtor padrão.
            Realiza cálculos da paginação.
            </summary>
            <param name="page">Página atual/selecionada.</param>
            <param name="totalItems">Quantidade total de itens.</param>
            <param name="itemsPerPage">Quantidade de itens por página.</param>
            <param name="linkVisibleCount">Quantidade de links visíveis na paginação.</param>
        </member>
        <member name="P:Myframework.Libraries.Common.Pagination.PaggingFrontCalculation.LinkVisibleCount">
            <summary>Quantidade de links visíveis na paginação.</summary>
        </member>
        <member name="P:Myframework.Libraries.Common.Pagination.PaggingFrontCalculation.IndexFirstItemPage">
            <summary>Index (baseado em 1) do primeiro item da página.</summary>
        </member>
        <member name="P:Myframework.Libraries.Common.Pagination.PaggingFrontCalculation.IndexLastItemPage">
            <summary>Index (baseado em 1) do último item da página.</summary>
        </member>
        <member name="P:Myframework.Libraries.Common.Pagination.PaggingFrontCalculation.IndexPreviousPage">
            <summary>Página anterior à página atual. Se não houver página anterior, recebe o valor da página atual.</summary>
        </member>
        <member name="P:Myframework.Libraries.Common.Pagination.PaggingFrontCalculation.IndexNextPage">
            <summary>Página posterior à página atual. Se não houver página posterior, recebe o valor da página atual.</summary>
        </member>
        <member name="P:Myframework.Libraries.Common.Pagination.PaggingFrontCalculation.IndexLastPage">
            <summary>Última página da paginação.</summary>
        </member>
        <member name="P:Myframework.Libraries.Common.Pagination.PaggingFrontCalculation.PagesToShow">
            <summary>Lista com as páginas que devem ser exibidas (como link ou outro componente).</summary>
        </member>
        <member name="P:Myframework.Libraries.Common.Pagination.PaggingFrontCalculation.ShowPreviousLink">
            <summary>Indica se deve mostrar o link anterior para a página atual. Ex: se a página atual for 0, significa que não precisamos mostrar o link.</summary>
        </member>
        <member name="P:Myframework.Libraries.Common.Pagination.PaggingFrontCalculation.ShowNextLink">
            <summary>Indica se deve mostrar o link posterior para a página atual. Ex: se a página atual for igual ao a última página, significa que não precisamos mostrar o link.</summary>
        </member>
        <member name="P:Myframework.Libraries.Common.Pagination.PaggingFrontCalculation.ShowFirstLink">
            <summary>Indica se deve mostrar o link para o primeiro item. Segue a mesma regra do LinkAnterior, combinada com o parâmetro especificado no construtor.</summary>
        </member>
        <member name="P:Myframework.Libraries.Common.Pagination.PaggingFrontCalculation.ShowLastLink">
            <summary>Indica se deve mostrar o link para o ultimo item. Segue a mesma regra do LinkPosterior, combinada com o parâmetro especificado no construtor.</summary>
        </member>
        <member name="T:Myframework.Libraries.Common.Password.PasswordGenerator">
            <summary>
            Classe para geração de senhas.
            </summary>
        </member>
        <member name="M:Myframework.Libraries.Common.Password.PasswordGenerator.GenerateRandomPassword(System.Int32,System.String,System.Boolean)">
            <summary>
            Gera senha aleatória de acordo com os parâmetros passados ou usando os valores padrão.
            </summary>
            <param name="lengthPassword">Tamanho da senha. Caso não passe valor o tamanho padrão será 12</param>
            <param name="allowedChars">Caracteres que devem ser usados para gerar a senha. Caso não passe valor os caracteres utilizados serão <c><![CDATA[abcdefghijklmnopqrstuvxzABCDEFGHIJKLMNOPQRSTUVXZ1234567890!@#$%^&*()-=]]></c></param>
            <param name="ensureStrongPassword">Informar se a senha será forte ou não. Caso não passe valor será considerado senha forte</param>
            <returns>Senha gerada</returns>
            <example>
            <code>
            var senha = PasswordHelper.GenerateRandomPassword();
            </code>
            </example>
        </member>
        <member name="M:Myframework.Libraries.Common.Password.PasswordGenerator.GeneratePasswordUsingSHA512(System.Int32,System.String,System.Boolean)">
            <summary>
            Gera uma senha usando SHA512.
            </summary>
            <param name="lengthPassword"></param>
            <param name="seed"></param>
            <param name="ensureStrongPassword"></param>
            <returns></returns>
        </member>
        <member name="T:Myframework.Libraries.Common.Password.PasswordScoreValidator">
            <summary>
            Classe para gerar um score de senha.
            </summary>
        </member>
        <member name="M:Myframework.Libraries.Common.Password.PasswordScoreValidator.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Myframework.Libraries.Common.Password.PasswordScoreValidator.#ctor(System.Collections.Generic.List{System.Char})">
            <summary>
            
            </summary>
            <param name="specialCharChecked"></param>
        </member>
        <member name="P:Myframework.Libraries.Common.Password.PasswordScoreValidator.SpecialChars">
            <summary>
            Caracteres especiais que são checados para compor o score da senha.
            </summary>
        </member>
        <member name="M:Myframework.Libraries.Common.Password.PasswordScoreValidator.CalculateScore(System.String)">
            <summary>
            Retorna a pontuação de acordo com a senha passada. 
            </summary>
            <param name="password">Senha para ser pontuada</param>
            <returns>Enumerador com a pontuação</returns>
        </member>
        <member name="T:Myframework.Libraries.Common.RegexUtil.RegexUteis">
            <summary>
            Regex utilitários.
            </summary>
        </member>
        <member name="F:Myframework.Libraries.Common.RegexUtil.RegexUteis.CPF">
            <summary></summary>
        </member>
        <member name="F:Myframework.Libraries.Common.RegexUtil.RegexUteis.CNPJ">
            <summary></summary>
        </member>
        <member name="F:Myframework.Libraries.Common.RegexUtil.RegexUteis.Email">
            <summary></summary>
        </member>
        <member name="F:Myframework.Libraries.Common.RegexUtil.RegexUteis.Iccid">
            <summary></summary>
        </member>
        <member name="F:Myframework.Libraries.Common.RegexUtil.RegexUteis.TelephoneOrCellPhone">
            <summary></summary>
        </member>
        <member name="T:Myframework.Libraries.Common.Results.Result">
            <summary>
            Representa um resultado de operação. Por padrão o resultado é assumido como válido ao ser instanciado.
            </summary>
        </member>
        <member name="M:Myframework.Libraries.Common.Results.Result.#ctor">
            <summary>
            Construtor padrão. Por padrão o resultado é assumido como válido.
            </summary>
        </member>
        <member name="P:Myframework.Libraries.Common.Results.Result.Validations">
            <summary>
            Erros de validações ocorridas. Geralmente usadas para validações sobre propriedades.
            </summary>
        </member>
        <member name="P:Myframework.Libraries.Common.Results.Result.Message">
            <summary>
            Mensagem do resultado.
            </summary>
        </member>
        <member name="P:Myframework.Libraries.Common.Results.Result.Protocol">
            <summary>
            Protocolo para tracking.
            </summary>
        </member>
        <member name="P:Myframework.Libraries.Common.Results.Result.ResultCode">
            <summary>
            Código do resultado. Utilize a propriedade Valid para checar de forma fácil se o resultado foi bem sucedido ou não.
            </summary>
        </member>
        <member name="P:Myframework.Libraries.Common.Results.Result.Valid">
            <summary>
            Indica se o resultado foi bem sucedido ou não.
            </summary>
        </member>
        <member name="M:Myframework.Libraries.Common.Results.Result.Set(Myframework.Libraries.Common.Results.ResultCode,System.String,System.Collections.Generic.List{Myframework.Libraries.Common.Results.ResultValidation})">
            <summary>
            Configura este result com as informações desejadas.
            </summary>
            <param name="code"></param>
            <param name="message"></param>
            <param name="validations"></param>
        </member>
        <member name="M:Myframework.Libraries.Common.Results.Result.Set(Myframework.Libraries.Common.Results.ResultCode,System.String)">
            <summary>
            Configura este result com as informações desejadas.
            </summary>
            <param name="code"></param>
            <param name="message"></param>
        </member>
        <member name="M:Myframework.Libraries.Common.Results.Result.SetBusinessMessage(System.String)">
            <summary>
            Configura este result para o status "BusinessError" (ou seja, inválido) com a mensagem desejada.
            </summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Results.Result.SetFromAnother(Myframework.Libraries.Common.Results.Result)">
            <summary>
            Configura este result com as informações de outro result (message, messageCode e validations).
            </summary>
            <param name="result"></param>
        </member>
        <member name="M:Myframework.Libraries.Common.Results.Result.AddValidation(System.String,System.String)">
            <summary>
            Adiciona uma validação e seta o result code para BusinessError caso o status atual seja OK (válido).
            </summary>
            <param name="attribute"></param>
            <param name="message"></param>
        </member>
        <member name="M:Myframework.Libraries.Common.Results.Result.AddValidationsIfFails(System.String,Myframework.Libraries.Common.Validators.IValidatorResult)">
            <summary>
            Adiciona uma validação baseda no validador do Framework Common. Caso o validador seja inválido e este result tenha status OK, ele será atualizado para status BusinessError e a validação será adicionada à lista de validações.
            </summary>
            <param name="attribute"></param>
            <param name="validatorResult"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Results.Result.ToString">
            <summary>
            Retorna a mensagem e possíveis validações do result.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Results.Result.SetoToOK(System.String)">
            <summary>
            Configura este result para status OK (válido).
            </summary>
        </member>
        <member name="T:Myframework.Libraries.Common.Results.ResultCode">
            <summary>
            Enumerador para representar status do result. Segue a numeração do Http para facilitar conversões.
            </summary>
        </member>
        <member name="F:Myframework.Libraries.Common.Results.ResultCode.Ok">
            <summary>Indica que um resultado foi bem sucedido.</summary>
        </member>
        <member name="F:Myframework.Libraries.Common.Results.ResultCode.GenericError">
            <summary>Indica que ocorreu um erro genérico no resultado.</summary>
        </member>
        <member name="F:Myframework.Libraries.Common.Results.ResultCode.BusinessError">
            <summary>Indica que ocorreu uma validação de negócio no resultado.</summary>
        </member>
        <member name="F:Myframework.Libraries.Common.Results.ResultCode.BadRequest">
            <summary>Indica que os parâmetros informados estão incorretos.</summary>
        </member>
        <member name="T:Myframework.Libraries.Common.Results.ResultValidation">
            <summary>
            Classe para representar uma validação do result.
            </summary>
        </member>
        <member name="P:Myframework.Libraries.Common.Results.ResultValidation.Attribute">
            <summary>
            Campo da validação. Ex: "Cep".
            </summary>
        </member>
        <member name="P:Myframework.Libraries.Common.Results.ResultValidation.Message">
            <summary>
            Mensagem para a validação do campo. Ex: "Campo obrigatório".
            </summary>
        </member>
        <member name="T:Myframework.Libraries.Common.Results.Result`1">
            <summary>
            Representa um resultado de operação, com retorno genérico. Por padrão o resultado é assumido como válido ao ser instanciado.
            </summary>
            <typeparam name="T">Genérico que deve ser uma classe.</typeparam>
        </member>
        <member name="M:Myframework.Libraries.Common.Results.Result`1.#ctor(`0)">
            <summary>
            Construtor padrão. Por padrão o resultado é assumido como válido.
            </summary>
        </member>
        <member name="P:Myframework.Libraries.Common.Results.Result`1.Value">
            <summary>
            Valor de retorno do result. Só deve possuir valor caso seja válido.
            </summary>
        </member>
        <member name="M:Myframework.Libraries.Common.Results.Result`1.AddValidation(System.String,System.String)">
            <summary>
            Adiciona uma validação e seta o result code para BusinessError caso o status atual seja OK (válido).
            </summary>
            <param name="attribute"></param>
            <param name="message"></param>
        </member>
        <member name="M:Myframework.Libraries.Common.Results.Result`1.AddValidationsIfFails(System.String,Myframework.Libraries.Common.Validators.IValidatorResult)">
            <summary>
            Adiciona uma validação baseda no validador do Framework Common. Caso o validador seja inválido e este result tenha status OK, ele será atualizado para status BusinessError e a validação será adicionada à lista de validações.
            </summary>
            <param name="attribute"></param>
            <param name="validatorResult"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Results.Result`1.Set(Myframework.Libraries.Common.Results.ResultCode,System.String)">
            <summary>
            Configura este result com as informações desejadas.
            </summary>
            <param name="code"></param>
            <param name="message"></param>
        </member>
        <member name="M:Myframework.Libraries.Common.Results.Result`1.Set(Myframework.Libraries.Common.Results.ResultCode,System.String,System.Collections.Generic.List{Myframework.Libraries.Common.Results.ResultValidation})">
            <summary>
            Configura este result com as informações desejadas.
            </summary>
            <param name="code"></param>
            <param name="message"></param>
            <param name="validations"></param>
        </member>
        <member name="M:Myframework.Libraries.Common.Results.Result`1.SetBusinessMessage(System.String)">
            <summary>
            Configura este result para o status "BusinessError" (ou seja, inválido) com a mensagem desejada.
            </summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Results.Result`1.SetFromAnother(Myframework.Libraries.Common.Results.Result)">
            <summary>
            Configura este result com as informações de outro result (message, messageCode e validations).
            </summary>
            <param name="result"></param>
        </member>
        <member name="T:Myframework.Libraries.Common.UnitsOfMeasurement.ByteMeasurement">
            <summary>
            Represents a byte size value.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Myframework.Libraries.Common.UnitsOfMeasurement.ByteMeasurement.ToString" -->
        <member name="M:Myframework.Libraries.Common.UnitsOfMeasurement.ByteMeasurement.op_Increment(Myframework.Libraries.Common.UnitsOfMeasurement.ByteMeasurement)">
            <summary>
            Incrementa os bytes em 1. 
            Atenção, mesmo que essa classe tenha sido iniciada com outra medida, como megabyte por exemplo, a operação é feita sobre os bytes.
            </summary>
            <param name="measure"></param>
            <returns></returns>
        </member>
        <member name="T:Myframework.Libraries.Common.Validators.AggregateValidator">
            <summary>
            Agregador de validadores. Permite juntar diversos validadores em um só.
            </summary>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.AggregateValidator.#ctor(System.Collections.Generic.List{Myframework.Libraries.Common.Validators.IValidatorResult})">
            <summary>
            Construtor.
            </summary>
            <param name="results"></param>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.AggregateValidator.#ctor(Myframework.Libraries.Common.Validators.IValidatorResult[])">
            <summary>
            Construtor.
            </summary>
            <param name="results"></param>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.AggregateValidator.Aggregate(System.Collections.Generic.List{Myframework.Libraries.Common.Validators.IValidatorResult})">
            <summary>
            Agrega diversos validadores.
            </summary>
            <param name="results"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.AggregateValidator.Aggregate(Myframework.Libraries.Common.Validators.IValidatorResult[])">
            <summary>Agrega um ou mais resultados de validação em apenas um.</summary>
        </member>
        <member name="T:Myframework.Libraries.Common.Validators.BaseValidatorResult">
            <summary>
            Classe base com informações e comportamentos padrões de resultados de validações.
            </summary>
        </member>
        <member name="P:Myframework.Libraries.Common.Validators.BaseValidatorResult.Valid">
            <summary>
            Indica se o resultado de todos os validadores é válido ou não.
            </summary>
        </member>
        <member name="P:Myframework.Libraries.Common.Validators.BaseValidatorResult.Messages">
            <summary>
            Mensagens de erros.
            </summary>
        </member>
        <member name="P:Myframework.Libraries.Common.Validators.BaseValidatorResult.Message">
            <summary>
            Mensagem sumarizada de erros.
            </summary>
        </member>
        <member name="P:Myframework.Libraries.Common.Validators.BaseValidatorResult.Validators">
            <summary>
            Validadores que geraram este resultado.
            </summary>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.BaseValidatorResult.AggregateBase(System.Collections.Generic.List{Myframework.Libraries.Common.Validators.IValidatorResult})">
            <summary>
            Agrega um ou mais resultados de validação em apenas um.
            </summary>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.BaseValidatorResult.AddValidatorBase(Myframework.Libraries.Common.Validators.IValidator)">
            <summary>
            Adiciona um validador ao resultado.
            </summary>
            <param name="validator"></param>
        </member>
        <member name="T:Myframework.Libraries.Common.Validators.ValidatorExtensions">
            <summary>
            Extensões para aplicar validadores.
            </summary>
            <summary>
            Extensões para aplicar validadores.
            </summary>
            <summary>
            Extensões para aplicar validadores.
            </summary>
            <summary>
            Extensões para aplicar validadores.
            </summary>
            <summary>
            Extensões para aplicar validadores.
            </summary>
            <summary>
            Extensões para aplicar validadores.
            </summary>
            <summary>
            Extensões para aplicar validadores.
            </summary>
            <summary>
            Extensões para aplicar validadores.
            </summary>
            <summary>
            Extensões para aplicar validadores.
            </summary>
            <summary>
            Extensões para aplicar validadores.
            </summary>
            <summary>
            Extensões para aplicar validadores.
            </summary>
            <summary>
            Extensões para aplicar validadores.
            </summary>
            <summary>
            Extensões para aplicar validadores.
            </summary>
            <summary>
            Extensões para aplicar validadores.
            </summary>
            <summary>
            Extensões para aplicar validadores.
            </summary>
            <summary>
            Extensões para aplicar validadores.
            </summary>
            <summary>
            Extensões para aplicar validadores.
            </summary>
            <summary>
            Extensões para aplicar validadores.
            </summary>
            <summary>
            Extensões para aplicar validadores.
            </summary>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.BetweenExclusive(System.Nullable{System.Int64},System.Int64,System.Int64,System.String)">
            <summary>
            Valida se o número está entre os outros informados, NÃO considerando se o número é igual ao primeiro ou segundo valor de comparação.
            </summary>
            <param name="number"></param>
            <param name="startNumber"></param>
            <param name="endNumber"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.BetweenExclusive(System.Int64,System.Int64,System.Int64,System.String)">
            <summary>
            Valida se o número está entre os outros informados, NÃO considerando se o número é igual ao primeiro ou segundo valor de comparação.
            </summary>
            <param name="number"></param>
            <param name="startNumber"></param>
            <param name="endNumber"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.BetweenExclusive(Myframework.Libraries.Common.Validators.ValidatorStructResult{System.Int64},System.Int64,System.Int64,System.String)">
            <summary>
            Valida se o número está entre os outros informados, NÃO considerando se o número é igual ao primeiro ou segundo valor de comparação.
            </summary>
            <param name="result"></param>
            <param name="startNumber"></param>
            <param name="endNumber"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.BetweenExclusive(System.Nullable{System.Int32},System.Int32,System.Int32,System.String)">
            <summary>
            Valida se o número está entre os outros informados, NÃO considerando se o número é igual ao primeiro ou segundo valor de comparação.
            </summary>
            <param name="number"></param>
            <param name="startNumber"></param>
            <param name="endNumber"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.BetweenExclusive(System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Valida se o número está entre os outros informados, NÃO considerando se o número é igual ao primeiro ou segundo valor de comparação.
            </summary>
            <param name="number"></param>
            <param name="startNumber"></param>
            <param name="endNumber"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.BetweenExclusive(Myframework.Libraries.Common.Validators.ValidatorStructResult{System.Int32},System.Int32,System.Int32,System.String)">
            <summary>
            Valida se o número está entre os outros informados, NÃO considerando se o número é igual ao primeiro ou segundo valor de comparação.
            </summary>
            <param name="result"></param>
            <param name="startNumber"></param>
            <param name="endNumber"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.BetweenExclusive(System.Nullable{System.Int16},System.Int16,System.Int16,System.String)">
            <summary>
            Valida se o número está entre os outros informados, NÃO considerando se o número é igual ao primeiro ou segundo valor de comparação.
            </summary>
            <param name="number"></param>
            <param name="startNumber"></param>
            <param name="endNumber"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.BetweenExclusive(System.Int16,System.Int16,System.Int16,System.String)">
            <summary>
            Valida se o número está entre os outros informados, NÃO considerando se o número é igual ao primeiro ou segundo valor de comparação.
            </summary>
            <param name="number"></param>
            <param name="startNumber"></param>
            <param name="endNumber"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.BetweenExclusive(Myframework.Libraries.Common.Validators.ValidatorStructResult{System.Int16},System.Int16,System.Int16,System.String)">
            <summary>
            Valida se o número está entre os outros informados, NÃO considerando se o número é igual ao primeiro ou segundo valor de comparação.
            </summary>
            <param name="result"></param>
            <param name="startNumber"></param>
            <param name="endNumber"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.BetweenExclusive(System.Nullable{System.Byte},System.Byte,System.Byte,System.String)">
            <summary>
            Valida se o número está entre os outros informados, NÃO considerando se o número é igual ao primeiro ou segundo valor de comparação.
            </summary>
            <param name="number"></param>
            <param name="startNumber"></param>
            <param name="endNumber"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.BetweenExclusive(System.Byte,System.Byte,System.Byte,System.String)">
            <summary>
            Valida se o número está entre os outros informados, NÃO considerando se o número é igual ao primeiro ou segundo valor de comparação.
            </summary>
            <param name="number"></param>
            <param name="startNumber"></param>
            <param name="endNumber"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.BetweenExclusive(Myframework.Libraries.Common.Validators.ValidatorStructResult{System.Byte},System.Byte,System.Byte,System.String)">
            <summary>
            Valida se o número está entre os outros informados, NÃO considerando se o número é igual ao primeiro ou segundo valor de comparação.
            </summary>
            <param name="result"></param>
            <param name="startNumber"></param>
            <param name="endNumber"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.BetweenExclusive(System.Nullable{System.Decimal},System.Decimal,System.Decimal,System.String)">
            <summary>
            Valida se o número está entre os outros informados, NÃO considerando se o número é igual ao primeiro ou segundo valor de comparação.
            </summary>
            <param name="number"></param>
            <param name="startNumber"></param>
            <param name="endNumber"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.BetweenExclusive(System.Decimal,System.Decimal,System.Decimal,System.String)">
            <summary>
            Valida se o número está entre os outros informados, NÃO considerando se o número é igual ao primeiro ou segundo valor de comparação.
            </summary>
            <param name="number"></param>
            <param name="startNumber"></param>
            <param name="endNumber"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.BetweenExclusive(Myframework.Libraries.Common.Validators.ValidatorStructResult{System.Decimal},System.Decimal,System.Decimal,System.String)">
            <summary>
            Valida se o número está entre os outros informados, NÃO considerando se o número é igual ao primeiro ou segundo valor de comparação.
            </summary>
            <param name="result"></param>
            <param name="startNumber"></param>
            <param name="endNumber"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.BetweenExclusive(System.Nullable{System.Single},System.Single,System.Single,System.String)">
            <summary>
            Valida se o número está entre os outros informados, NÃO considerando se o número é igual ao primeiro ou segundo valor de comparação.
            </summary>
            <param name="number"></param>
            <param name="startNumber"></param>
            <param name="endNumber"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.BetweenExclusive(System.Single,System.Single,System.Single,System.String)">
            <summary>
            Valida se o número está entre os outros informados, NÃO considerando se o número é igual ao primeiro ou segundo valor de comparação.
            </summary>
            <param name="number"></param>
            <param name="startNumber"></param>
            <param name="endNumber"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.BetweenExclusive(Myframework.Libraries.Common.Validators.ValidatorStructResult{System.Single},System.Single,System.Single,System.String)">
            <summary>
            Valida se o número está entre os outros informados, NÃO considerando se o número é igual ao primeiro ou segundo valor de comparação.
            </summary>
            <param name="result"></param>
            <param name="startNumber"></param>
            <param name="endNumber"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.BetweenExclusive(System.Nullable{System.Double},System.Double,System.Double,System.String)">
            <summary>
            Valida se o número está entre os outros informados, NÃO considerando se o número é igual ao primeiro ou segundo valor de comparação.
            </summary>
            <param name="number"></param>
            <param name="startNumber"></param>
            <param name="endNumber"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.BetweenExclusive(System.Double,System.Double,System.Double,System.String)">
            <summary>
            Valida se o número está entre os outros informados, NÃO considerando se o número é igual ao primeiro ou segundo valor de comparação.
            </summary>
            <param name="number"></param>
            <param name="startNumber"></param>
            <param name="endNumber"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.BetweenExclusive(Myframework.Libraries.Common.Validators.ValidatorStructResult{System.Double},System.Double,System.Double,System.String)">
            <summary>
            Valida se o número está entre os outros informados, NÃO considerando se o número é igual ao primeiro ou segundo valor de comparação.
            </summary>
            <param name="result"></param>
            <param name="startNumber"></param>
            <param name="endNumber"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.BetweenExclusive(System.Nullable{System.DateTime},System.DateTime,System.DateTime,System.String)">
            <summary>
            Valida se o data está entre as outras informadas, NÃO considerando se o número é igual ao primeiro ou segundo valor de comparação.
            </summary>
            <param name="number"></param>
            <param name="startNumber"></param>
            <param name="endNumber"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.BetweenExclusive(System.DateTime,System.DateTime,System.DateTime,System.String)">
            <summary>
            Valida se o data está entre as outras informadas, NÃO considerando se o número é igual ao primeiro ou segundo valor de comparação.
            </summary>
            <param name="number"></param>
            <param name="startNumber"></param>
            <param name="endNumber"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.BetweenExclusive(Myframework.Libraries.Common.Validators.ValidatorStructResult{System.DateTime},System.DateTime,System.DateTime,System.String)">
            <summary>
            Valida se o data está entre as outras informadas, NÃO considerando se o número é igual ao primeiro ou segundo valor de comparação.
            </summary>
            <param name="result"></param>
            <param name="startNumber"></param>
            <param name="endNumber"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.BetweenInclusive(System.Nullable{System.Int64},System.Int64,System.Int64,System.String)">
            <summary>
            Valida se o número está entre os outros informados, considerando se o número é igual ao primeiro ou segundo valor de comparação.
            </summary>
            <param name="number"></param>
            <param name="startNumber"></param>
            <param name="endNumber"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.BetweenInclusive(System.Int64,System.Int64,System.Int64,System.String)">
            <summary>
            Valida se o número está entre os outros informados, considerando se o número é igual ao primeiro ou segundo valor de comparação.
            </summary>
            <param name="number"></param>
            <param name="startNumber"></param>
            <param name="endNumber"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.BetweenInclusive(Myframework.Libraries.Common.Validators.ValidatorStructResult{System.Int64},System.Int64,System.Int64,System.String)">
            <summary>
            Valida se o número está entre os outros informados, considerando se o número é igual ao primeiro ou segundo valor de comparação.
            </summary>
            <param name="result"></param>
            <param name="startNumber"></param>
            <param name="endNumber"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.BetweenInclusive(System.Nullable{System.Int32},System.Int32,System.Int32,System.String)">
            <summary>
            Valida se o número está entre os outros informados, considerando se o número é igual ao primeiro ou segundo valor de comparação.
            </summary>
            <param name="number"></param>
            <param name="startNumber"></param>
            <param name="endNumber"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.BetweenInclusive(System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Valida se o número está entre os outros informados, considerando se o número é igual ao primeiro ou segundo valor de comparação.
            </summary>
            <param name="number"></param>
            <param name="startNumber"></param>
            <param name="endNumber"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.BetweenInclusive(Myframework.Libraries.Common.Validators.ValidatorStructResult{System.Int32},System.Int32,System.Int32,System.String)">
            <summary>
            Valida se o número está entre os outros informados, considerando se o número é igual ao primeiro ou segundo valor de comparação.
            </summary>
            <param name="result"></param>
            <param name="startNumber"></param>
            <param name="endNumber"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.BetweenInclusive(System.Nullable{System.Int16},System.Int16,System.Int16,System.String)">
            <summary>
            Valida se o número está entre os outros informados, considerando se o número é igual ao primeiro ou segundo valor de comparação.
            </summary>
            <param name="number"></param>
            <param name="startNumber"></param>
            <param name="endNumber"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.BetweenInclusive(System.Int16,System.Int16,System.Int16,System.String)">
            <summary>
            Valida se o número está entre os outros informados, considerando se o número é igual ao primeiro ou segundo valor de comparação.
            </summary>
            <param name="number"></param>
            <param name="startNumber"></param>
            <param name="endNumber"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.BetweenInclusive(Myframework.Libraries.Common.Validators.ValidatorStructResult{System.Int16},System.Int16,System.Int16,System.String)">
            <summary>
            Valida se o número está entre os outros informados, considerando se o número é igual ao primeiro ou segundo valor de comparação.
            </summary>
            <param name="result"></param>
            <param name="startNumber"></param>
            <param name="endNumber"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.BetweenInclusive(System.Nullable{System.Byte},System.Byte,System.Byte,System.String)">
            <summary>
            Valida se o número está entre os outros informados, considerando se o número é igual ao primeiro ou segundo valor de comparação.
            </summary>
            <param name="number"></param>
            <param name="startNumber"></param>
            <param name="endNumber"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.BetweenInclusive(System.Byte,System.Byte,System.Byte,System.String)">
            <summary>
            Valida se o número está entre os outros informados, considerando se o número é igual ao primeiro ou segundo valor de comparação.
            </summary>
            <param name="number"></param>
            <param name="startNumber"></param>
            <param name="endNumber"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.BetweenInclusive(Myframework.Libraries.Common.Validators.ValidatorStructResult{System.Byte},System.Byte,System.Byte,System.String)">
            <summary>
            Valida se o número está entre os outros informados, considerando se o número é igual ao primeiro ou segundo valor de comparação.
            </summary>
            <param name="result"></param>
            <param name="startNumber"></param>
            <param name="endNumber"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.BetweenInclusive(System.Nullable{System.Decimal},System.Decimal,System.Decimal,System.String)">
            <summary>
            Valida se o número está entre os outros informados, considerando se o número é igual ao primeiro ou segundo valor de comparação.
            </summary>
            <param name="number"></param>
            <param name="startNumber"></param>
            <param name="endNumber"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.BetweenInclusive(System.Decimal,System.Decimal,System.Decimal,System.String)">
            <summary>
            Valida se o número está entre os outros informados, considerando se o número é igual ao primeiro ou segundo valor de comparação.
            </summary>
            <param name="number"></param>
            <param name="startNumber"></param>
            <param name="endNumber"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.BetweenInclusive(Myframework.Libraries.Common.Validators.ValidatorStructResult{System.Decimal},System.Decimal,System.Decimal,System.String)">
            <summary>
            Valida se o número está entre os outros informados, considerando se o número é igual ao primeiro ou segundo valor de comparação.
            </summary>
            <param name="result"></param>
            <param name="startNumber"></param>
            <param name="endNumber"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.BetweenInclusive(System.Nullable{System.Single},System.Single,System.Single,System.String)">
            <summary>
            Valida se o número está entre os outros informados, considerando se o número é igual ao primeiro ou segundo valor de comparação.
            </summary>
            <param name="number"></param>
            <param name="startNumber"></param>
            <param name="endNumber"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.BetweenInclusive(System.Single,System.Single,System.Single,System.String)">
            <summary>
            Valida se o número está entre os outros informados, considerando se o número é igual ao primeiro ou segundo valor de comparação.
            </summary>
            <param name="number"></param>
            <param name="startNumber"></param>
            <param name="endNumber"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.BetweenInclusive(Myframework.Libraries.Common.Validators.ValidatorStructResult{System.Single},System.Single,System.Single,System.String)">
            <summary>
            Valida se o número está entre os outros informados, considerando se o número é igual ao primeiro ou segundo valor de comparação.
            </summary>
            <param name="result"></param>
            <param name="startNumber"></param>
            <param name="endNumber"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.BetweenInclusive(System.Nullable{System.Double},System.Double,System.Double,System.String)">
            <summary>
            Valida se o número está entre os outros informados, considerando se o número é igual ao primeiro ou segundo valor de comparação.
            </summary>
            <param name="number"></param>
            <param name="startNumber"></param>
            <param name="endNumber"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.BetweenInclusive(System.Double,System.Double,System.Double,System.String)">
            <summary>
            Valida se o número está entre os outros informados, considerando se o número é igual ao primeiro ou segundo valor de comparação.
            </summary>
            <param name="number"></param>
            <param name="startNumber"></param>
            <param name="endNumber"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.BetweenInclusive(Myframework.Libraries.Common.Validators.ValidatorStructResult{System.Double},System.Double,System.Double,System.String)">
            <summary>
            Valida se o número está entre os outros informados, considerando se o número é igual ao primeiro ou segundo valor de comparação.
            </summary>
            <param name="result"></param>
            <param name="startNumber"></param>
            <param name="endNumber"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.BetweenInclusive(System.Nullable{System.DateTime},System.DateTime,System.DateTime,System.String)">
            <summary>
            Valida se a data está entre as outras informadas, considerando se o número é igual ao primeiro ou segundo valor de comparação.
            </summary>
            <param name="number"></param>
            <param name="startNumber"></param>
            <param name="endNumber"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.BetweenInclusive(System.DateTime,System.DateTime,System.DateTime,System.String)">
            <summary>
            Valida se a data está entre as outras informadas, considerando se o número é igual ao primeiro ou segundo valor de comparação.
            </summary>
            <param name="number"></param>
            <param name="startNumber"></param>
            <param name="endNumber"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.BetweenInclusive(Myframework.Libraries.Common.Validators.ValidatorStructResult{System.DateTime},System.DateTime,System.DateTime,System.String)">
            <summary>
            Valida se a data está entre as outras informadas, considerando se o número é igual ao primeiro ou segundo valor de comparação.
            </summary>
            <param name="result"></param>
            <param name="startNumber"></param>
            <param name="endNumber"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.Cpf(System.String,System.String)">
            <summary>
            Valida um CPF.
            </summary>
            <param name="cpf"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.Cpf(Myframework.Libraries.Common.Validators.ValidatorClassResult{System.String},System.String)">
            <summary>
            Valida um CPF.
            </summary>
            <param name="result"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.Must(System.Object,System.Func{System.Boolean},System.String)">
            <summary>
            Valida se a função informada é verdadeira.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <param name="funcMust"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.Must``1(``0,System.Func{System.Boolean},System.String)">
            <summary>
            Valida se a função informada é verdadeira.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <param name="funcMust"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.Must``1(Myframework.Libraries.Common.Validators.ValidatorClassResult{``0},System.Func{System.Boolean},System.String)">
            <summary>
            Valida se a função informada é verdadeira.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="result"></param>
            <param name="funcMust"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.Must``1(Myframework.Libraries.Common.Validators.ValidatorStructResult{``0},System.Func{System.Boolean},System.String)">
            <summary>
            Valida se a função informada é verdadeira.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="result"></param>
            <param name="funcMust"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.EmailAddress(System.String,System.String)">
            <summary>
            Valida um email.
            </summary>
            <param name="email"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.EmailAddress(Myframework.Libraries.Common.Validators.ValidatorClassResult{System.String},System.String)">
            <summary>
            Valida um email.
            </summary>
            <param name="result"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.Empty(System.String,System.String)">
            <summary>
            Valida se o valor está vazio.
            </summary>
            <param name="str"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.Empty(Myframework.Libraries.Common.Validators.ValidatorClassResult{System.String},System.String)">
            <summary>
            Valida se o valor está vazio.
            </summary>
            <param name="result"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.Empty(System.Nullable{System.Guid},System.String)">
            <summary>
            Valida se o valor está vazio.
            </summary>
            <param name="guid"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.Empty(System.Guid,System.String)">
            <summary>
            Valida se o valor está vazio.
            </summary>
            <param name="guid"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.Empty(Myframework.Libraries.Common.Validators.ValidatorStructResult{System.Guid},System.String)">
            <summary>
            Valida se o valor está vazio.
            </summary>
            <param name="result"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.EnumIsDefined(System.Enum,System.String)">
            <summary>
            Valida se um item de enum pertence ao enum. Ex: dado um enum TesteEnum com 3 itens, com valores 1,2,3, respectivamente, o cast (TesteEnum)5 é permitido pelo C#, mas não reflete um enum válido na lista desse enum.
            </summary>
            <param name="enumerator"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.EnumIsDefined(Myframework.Libraries.Common.Validators.ValidatorClassResult{System.Enum},System.String)">
            <summary>
            /// Valida se um item de enum pertence ao enum. Ex: dado um enum TesteEnum com 3 itens, com valores 1,2,3, respectivamente, o cast (TesteEnum)5 é permitido pelo C#, mas não reflete um enum válido na lista desse enum.
            </summary>
            <param name="result"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.GreaterThan(System.Nullable{System.Int64},System.Int64,System.String)">
            <summary>
            Valida se valor é maior que o valor de comparação.
            </summary>
            <param name="number"></param>
            <param name="numberCompare"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.GreaterThan(System.Int64,System.Int64,System.String)">
            <summary>
            Valida se valor é maior que o valor de comparação.
            </summary>
            <param name="number"></param>
            <param name="numberCompare"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.GreaterThan(Myframework.Libraries.Common.Validators.ValidatorStructResult{System.Int64},System.Int64,System.String)">
            <summary>
            Valida se valor é maior que o valor de comparação.
            </summary>
            <param name="result"></param>
            <param name="numberCompare"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.GreaterThan(System.Nullable{System.Int32},System.Int32,System.String)">
            <summary>
            Valida se valor é maior que o valor de comparação.
            </summary>
            <param name="number"></param>
            <param name="numberCompare"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.GreaterThan(System.Int32,System.Int32,System.String)">
            <summary>
            Valida se valor é maior que o valor de comparação.
            </summary>
            <param name="number"></param>
            <param name="numberCompare"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.GreaterThan(Myframework.Libraries.Common.Validators.ValidatorStructResult{System.Int32},System.Int32,System.String)">
            <summary>
            Valida se valor é maior que o valor de comparação.
            </summary>
            <param name="result"></param>
            <param name="numberCompare"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.GreaterThan(System.Nullable{System.Int16},System.Int16,System.String)">
            <summary>
            Valida se valor é maior que o valor de comparação.
            </summary>
            <param name="number"></param>
            <param name="numberCompare"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.GreaterThan(System.Int16,System.Int16,System.String)">
            <summary>
            Valida se valor é maior que o valor de comparação.
            </summary>
            <param name="number"></param>
            <param name="numberCompare"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.GreaterThan(Myframework.Libraries.Common.Validators.ValidatorStructResult{System.Int16},System.Int16,System.String)">
            <summary>
            Valida se valor é maior que o valor de comparação.
            </summary>
            <param name="result"></param>
            <param name="numberCompare"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.GreaterThan(System.Nullable{System.Byte},System.Byte,System.String)">
            <summary>
            Valida se valor é maior que o valor de comparação.
            </summary>
            <param name="number"></param>
            <param name="numberCompare"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.GreaterThan(System.Byte,System.Byte,System.String)">
            <summary>
            Valida se valor é maior que o valor de comparação.
            </summary>
            <param name="number"></param>
            <param name="numberCompare"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.GreaterThan(Myframework.Libraries.Common.Validators.ValidatorStructResult{System.Byte},System.Byte,System.String)">
            <summary>
            Valida se valor é maior que o valor de comparação.
            </summary>
            <param name="result"></param>
            <param name="numberCompare"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.GreaterThan(System.Nullable{System.Decimal},System.Decimal,System.String)">
            <summary>
            Valida se valor é maior que o valor de comparação.
            </summary>
            <param name="number"></param>
            <param name="numberCompare"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.GreaterThan(System.Decimal,System.Decimal,System.String)">
            <summary>
            Valida se valor é maior que o valor de comparação.
            </summary>
            <param name="number"></param>
            <param name="numberCompare"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.GreaterThan(Myframework.Libraries.Common.Validators.ValidatorStructResult{System.Decimal},System.Decimal,System.String)">
            <summary>
            Valida se valor é maior que o valor de comparação.
            </summary>
            <param name="result"></param>
            <param name="numberCompare"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.GreaterThan(System.Nullable{System.Single},System.Single,System.String)">
            <summary>
            Valida se valor é maior que o valor de comparação.
            </summary>
            <param name="number"></param>
            <param name="numberCompare"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.GreaterThan(System.Single,System.Single,System.String)">
            <summary>
            Valida se valor é maior que o valor de comparação.
            </summary>
            <param name="number"></param>
            <param name="numberCompare"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.GreaterThan(Myframework.Libraries.Common.Validators.ValidatorStructResult{System.Single},System.Single,System.String)">
            <summary>
            Valida se valor é maior que o valor de comparação.
            </summary>
            <param name="result"></param>
            <param name="numberCompare"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.GreaterThan(System.Nullable{System.Double},System.Double,System.String)">
            <summary>
            Valida se valor é maior que o valor de comparação.
            </summary>
            <param name="number"></param>
            <param name="numberCompare"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.GreaterThan(System.Double,System.Double,System.String)">
            <summary>
            Valida se valor é maior que o valor de comparação.
            </summary>
            <param name="number"></param>
            <param name="numberCompare"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.GreaterThan(Myframework.Libraries.Common.Validators.ValidatorStructResult{System.Double},System.Double,System.String)">
            <summary>
            Valida se valor é maior que o valor de comparação.
            </summary>
            <param name="result"></param>
            <param name="numberCompare"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.GreaterThan(System.Nullable{System.DateTime},System.DateTime,System.String)">
            <summary>
            Valida se valor é maior que o valor de comparação.
            </summary>
            <param name="data"></param>
            <param name="dataCompare"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.GreaterThan(System.DateTime,System.DateTime,System.String)">
            <summary>
            Valida se valor é maior que o valor de comparação.
            </summary>
            <param name="data"></param>
            <param name="dataCompare"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.GreaterThan(Myframework.Libraries.Common.Validators.ValidatorStructResult{System.DateTime},System.DateTime,System.String)">
            <summary>
            Valida se valor é maior que o valor de comparação.
            </summary>
            <param name="result"></param>
            <param name="dataCompare"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.GreaterThanOrEqual(System.Nullable{System.Int64},System.Int64,System.String)">
            <summary>
            Valida se valor é maior ou igual ao valor de comparação.
            </summary>
            <param name="number"></param>
            <param name="numberCompare"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.GreaterThanOrEqual(System.Int64,System.Int64,System.String)">
            <summary>
            Valida se valor é maior ou igual ao valor de comparação.
            </summary>
            <param name="number"></param>
            <param name="numberCompare"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.GreaterThanOrEqual(Myframework.Libraries.Common.Validators.ValidatorStructResult{System.Int64},System.Int64,System.String)">
            <summary>
            Valida se valor é maior ou igual ao valor de comparação.
            </summary>
            <param name="result"></param>
            <param name="numberCompare"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.GreaterThanOrEqual(System.Nullable{System.Int32},System.Int32,System.String)">
            <summary>
            Valida se valor é maior ou igual ao valor de comparação.
            </summary>
            <param name="number"></param>
            <param name="numberCompare"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.GreaterThanOrEqual(System.Int32,System.Int32,System.String)">
            <summary>
            Valida se valor é maior ou igual ao valor de comparação.
            </summary>
            <param name="number"></param>
            <param name="numberCompare"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.GreaterThanOrEqual(Myframework.Libraries.Common.Validators.ValidatorStructResult{System.Int32},System.Int32,System.String)">
            <summary>
            Valida se valor é maior ou igual ao valor de comparação.
            </summary>
            <param name="result"></param>
            <param name="numberCompare"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.GreaterThanOrEqual(System.Nullable{System.Int16},System.Int16,System.String)">
            <summary>
            Valida se valor é maior ou igual ao valor de comparação.
            </summary>
            <param name="number"></param>
            <param name="numberCompare"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.GreaterThanOrEqual(System.Int16,System.Int16,System.String)">
            <summary>
            Valida se valor é maior ou igual ao valor de comparação.
            </summary>
            <param name="number"></param>
            <param name="numberCompare"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.GreaterThanOrEqual(Myframework.Libraries.Common.Validators.ValidatorStructResult{System.Int16},System.Int16,System.String)">
            <summary>
            Valida se valor é maior ou igual ao valor de comparação.
            </summary>
            <param name="result"></param>
            <param name="numberCompare"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.GreaterThanOrEqual(System.Nullable{System.Byte},System.Byte,System.String)">
            <summary>
            Valida se valor é maior ou igual ao valor de comparação.
            </summary>
            <param name="number"></param>
            <param name="numberCompare"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.GreaterThanOrEqual(System.Byte,System.Byte,System.String)">
            <summary>
            Valida se valor é maior ou igual ao valor de comparação.
            </summary>
            <param name="number"></param>
            <param name="numberCompare"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.GreaterThanOrEqual(Myframework.Libraries.Common.Validators.ValidatorStructResult{System.Byte},System.Byte,System.String)">
            <summary>
            Valida se valor é maior ou igual ao valor de comparação.
            </summary>
            <param name="result"></param>
            <param name="numberCompare"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.GreaterThanOrEqual(System.Nullable{System.Decimal},System.Decimal,System.String)">
            <summary>
            Valida se valor é maior ou igual ao valor de comparação.
            </summary>
            <param name="number"></param>
            <param name="numberCompare"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.GreaterThanOrEqual(System.Decimal,System.Decimal,System.String)">
            <summary>
            Valida se valor é maior ou igual ao valor de comparação.
            </summary>
            <param name="number"></param>
            <param name="numberCompare"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.GreaterThanOrEqual(Myframework.Libraries.Common.Validators.ValidatorStructResult{System.Decimal},System.Decimal,System.String)">
            <summary>
            Valida se valor é maior ou igual ao valor de comparação.
            </summary>
            <param name="result"></param>
            <param name="numberCompare"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.GreaterThanOrEqual(System.Nullable{System.Single},System.Single,System.String)">
            <summary>
            Valida se valor é maior ou igual ao valor de comparação.
            </summary>
            <param name="number"></param>
            <param name="numberCompare"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.GreaterThanOrEqual(System.Single,System.Single,System.String)">
            <summary>
            Valida se valor é maior ou igual ao valor de comparação.
            </summary>
            <param name="number"></param>
            <param name="numberCompare"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.GreaterThanOrEqual(Myframework.Libraries.Common.Validators.ValidatorStructResult{System.Single},System.Single,System.String)">
            <summary>
            Valida se valor é maior ou igual ao valor de comparação.
            </summary>
            <param name="result"></param>
            <param name="numberCompare"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.GreaterThanOrEqual(System.Nullable{System.Double},System.Double,System.String)">
            <summary>
            Valida se valor é maior ou igual ao valor de comparação.
            </summary>
            <param name="number"></param>
            <param name="numberCompare"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.GreaterThanOrEqual(System.Double,System.Double,System.String)">
            <summary>
            Valida se valor é maior ou igual ao valor de comparação.
            </summary>
            <param name="number"></param>
            <param name="numberCompare"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.GreaterThanOrEqual(Myframework.Libraries.Common.Validators.ValidatorStructResult{System.Double},System.Double,System.String)">
            <summary>
            Valida se valor é maior ou igual ao valor de comparação.
            </summary>
            <param name="result"></param>
            <param name="numberCompare"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.GreaterThanOrEqual(System.Nullable{System.DateTime},System.DateTime,System.String)">
            <summary>
            Valida se valor é maior ou igual ao valor de comparação.
            </summary>
            <param name="data"></param>
            <param name="dataCompare"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.GreaterThanOrEqual(System.DateTime,System.DateTime,System.String)">
            <summary>
            Valida se valor é maior ou igual ao valor de comparação.
            </summary>
            <param name="data"></param>
            <param name="dataCompare"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.GreaterThanOrEqual(Myframework.Libraries.Common.Validators.ValidatorStructResult{System.DateTime},System.DateTime,System.String)">
            <summary>
            Valida se valor é maior ou igual ao valor de comparação.
            </summary>
            <param name="result"></param>
            <param name="dataCompare"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.LessThan(System.Nullable{System.Int64},System.Int64,System.String)">
            <summary>
            Valida se valor é menor que o valor de comparação.
            </summary>
            <param name="number"></param>
            <param name="numberCompare"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.LessThan(System.Int64,System.Int64,System.String)">
            <summary>
            Valida se valor é menor que o valor de comparação.
            </summary>
            <param name="number"></param>
            <param name="numberCompare"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.LessThan(Myframework.Libraries.Common.Validators.ValidatorStructResult{System.Int64},System.Int64,System.String)">
            <summary>
            Valida se valor é menor que o valor de comparação.
            </summary>
            <param name="result"></param>
            <param name="numberCompare"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.LessThan(System.Nullable{System.Int32},System.Int32,System.String)">
            <summary>
            Valida se valor é menor que o valor de comparação.
            </summary>
            <param name="number"></param>
            <param name="numberCompare"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.LessThan(System.Int32,System.Int32,System.String)">
            <summary>
            Valida se valor é menor que o valor de comparação.
            </summary>
            <param name="number"></param>
            <param name="numberCompare"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.LessThan(Myframework.Libraries.Common.Validators.ValidatorStructResult{System.Int32},System.Int32,System.String)">
            <summary>
            Valida se valor é menor que o valor de comparação.
            </summary>
            <param name="result"></param>
            <param name="numberCompare"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.LessThan(System.Nullable{System.Int16},System.Int16,System.String)">
            <summary>
            Valida se valor é menor que o valor de comparação.
            </summary>
            <param name="number"></param>
            <param name="numberCompare"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.LessThan(System.Int16,System.Int16,System.String)">
            <summary>
            Valida se valor é menor que o valor de comparação.
            </summary>
            <param name="number"></param>
            <param name="numberCompare"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.LessThan(Myframework.Libraries.Common.Validators.ValidatorStructResult{System.Int16},System.Int16,System.String)">
            <summary>
            Valida se valor é menor que o valor de comparação.
            </summary>
            <param name="result"></param>
            <param name="numberCompare"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.LessThan(System.Nullable{System.Byte},System.Byte,System.String)">
            <summary>
            Valida se valor é menor que o valor de comparação.
            </summary>
            <param name="number"></param>
            <param name="numberCompare"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.LessThan(System.Byte,System.Byte,System.String)">
            <summary>
            Valida se valor é menor que o valor de comparação.
            </summary>
            <param name="number"></param>
            <param name="numberCompare"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.LessThan(Myframework.Libraries.Common.Validators.ValidatorStructResult{System.Byte},System.Byte,System.String)">
            <summary>
            Valida se valor é menor que o valor de comparação.
            </summary>
            <param name="result"></param>
            <param name="numberCompare"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.LessThan(System.Nullable{System.Decimal},System.Decimal,System.String)">
            <summary>
            Valida se valor é menor que o valor de comparação.
            </summary>
            <param name="number"></param>
            <param name="numberCompare"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.LessThan(System.Decimal,System.Decimal,System.String)">
            <summary>
            Valida se valor é menor que o valor de comparação.
            </summary>
            <param name="number"></param>
            <param name="numberCompare"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.LessThan(Myframework.Libraries.Common.Validators.ValidatorStructResult{System.Decimal},System.Decimal,System.String)">
            <summary>
            Valida se valor é menor que o valor de comparação.
            </summary>
            <param name="result"></param>
            <param name="numberCompare"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.LessThan(System.Nullable{System.Single},System.Single,System.String)">
            <summary>
            Valida se valor é menor que o valor de comparação.
            </summary>
            <param name="number"></param>
            <param name="numberCompare"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.LessThan(System.Single,System.Single,System.String)">
            <summary>
            Valida se valor é menor que o valor de comparação.
            </summary>
            <param name="number"></param>
            <param name="numberCompare"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.LessThan(Myframework.Libraries.Common.Validators.ValidatorStructResult{System.Single},System.Single,System.String)">
            <summary>
            Valida se valor é menor que o valor de comparação.
            </summary>
            <param name="result"></param>
            <param name="numberCompare"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.LessThan(System.Nullable{System.Double},System.Double,System.String)">
            <summary>
            Valida se valor é menor que o valor de comparação.
            </summary>
            <param name="number"></param>
            <param name="numberCompare"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.LessThan(System.Double,System.Double,System.String)">
            <summary>
            Valida se valor é menor que o valor de comparação.
            </summary>
            <param name="number"></param>
            <param name="numberCompare"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.LessThan(Myframework.Libraries.Common.Validators.ValidatorStructResult{System.Double},System.Double,System.String)">
            <summary>
            Valida se valor é menor que o valor de comparação.
            </summary>
            <param name="result"></param>
            <param name="numberCompare"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.LessThan(System.Nullable{System.DateTime},System.DateTime,System.String)">
            <summary>
            Valida se valor é menor que o valor de comparação.
            </summary>
            <param name="data"></param>
            <param name="dataCompare"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.LessThan(System.DateTime,System.DateTime,System.String)">
            <summary>
            Valida se valor é menor que o valor de comparação.
            </summary>
            <param name="data"></param>
            <param name="dataCompare"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.LessThan(Myframework.Libraries.Common.Validators.ValidatorStructResult{System.DateTime},System.DateTime,System.String)">
            <summary>
            Valida se valor é menor que o valor de comparação.
            </summary>
            <param name="result"></param>
            <param name="dataCompare"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.LessThanOrEqual(System.Nullable{System.Int64},System.Int64,System.String)">
            <summary>
            Valida se valor é menor ou igual ao valor de comparação.
            </summary>
            <param name="number"></param>
            <param name="numberCompare"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.LessThanOrEqual(System.Int64,System.Int64,System.String)">
            <summary>
            Valida se valor é menor ou igual ao valor de comparação.
            </summary>
            <param name="number"></param>
            <param name="numberCompare"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.LessThanOrEqual(Myframework.Libraries.Common.Validators.ValidatorStructResult{System.Int64},System.Int64,System.String)">
            <summary>
            Valida se valor é menor ou igual ao valor de comparação.
            </summary>
            <param name="result"></param>
            <param name="numberCompare"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.LessThanOrEqual(System.Nullable{System.Int32},System.Int32,System.String)">
            <summary>
            Valida se valor é menor ou igual ao valor de comparação.
            </summary>
            <param name="number"></param>
            <param name="numberCompare"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.LessThanOrEqual(System.Int32,System.Int32,System.String)">
            <summary>
            Valida se valor é menor ou igual ao valor de comparação.
            </summary>
            <param name="number"></param>
            <param name="numberCompare"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.LessThanOrEqual(Myframework.Libraries.Common.Validators.ValidatorStructResult{System.Int32},System.Int32,System.String)">
            <summary>
            Valida se valor é menor ou igual ao valor de comparação.
            </summary>
            <param name="result"></param>
            <param name="numberCompare"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.LessThanOrEqual(System.Nullable{System.Int16},System.Int16,System.String)">
            <summary>
            Valida se valor é menor ou igual ao valor de comparação.
            </summary>
            <param name="number"></param>
            <param name="numberCompare"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.LessThanOrEqual(System.Int16,System.Int16,System.String)">
            <summary>
            Valida se valor é menor ou igual ao valor de comparação.
            </summary>
            <param name="number"></param>
            <param name="numberCompare"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.LessThanOrEqual(Myframework.Libraries.Common.Validators.ValidatorStructResult{System.Int16},System.Int16,System.String)">
            <summary>
            Valida se valor é menor ou igual ao valor de comparação.
            </summary>
            <param name="result"></param>
            <param name="numberCompare"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.LessThanOrEqual(System.Nullable{System.Byte},System.Byte,System.String)">
            <summary>
            Valida se valor é menor ou igual ao valor de comparação.
            </summary>
            <param name="number"></param>
            <param name="numberCompare"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.LessThanOrEqual(System.Byte,System.Byte,System.String)">
            <summary>
            Valida se valor é menor ou igual ao valor de comparação.
            </summary>
            <param name="number"></param>
            <param name="numberCompare"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.LessThanOrEqual(Myframework.Libraries.Common.Validators.ValidatorStructResult{System.Byte},System.Byte,System.String)">
            <summary>
            Valida se valor é menor ou igual ao valor de comparação.
            </summary>
            <param name="result"></param>
            <param name="numberCompare"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.LessThanOrEqual(System.Nullable{System.Decimal},System.Decimal,System.String)">
            <summary>
            Valida se valor é menor ou igual ao valor de comparação.
            </summary>
            <param name="number"></param>
            <param name="numberCompare"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.LessThanOrEqual(System.Decimal,System.Decimal,System.String)">
            <summary>
            Valida se valor é menor ou igual ao valor de comparação.
            </summary>
            <param name="number"></param>
            <param name="numberCompare"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.LessThanOrEqual(Myframework.Libraries.Common.Validators.ValidatorStructResult{System.Decimal},System.Decimal,System.String)">
            <summary>
            Valida se valor é menor ou igual ao valor de comparação.
            </summary>
            <param name="result"></param>
            <param name="numberCompare"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.LessThanOrEqual(System.Nullable{System.Single},System.Single,System.String)">
            <summary>
            Valida se valor é menor ou igual ao valor de comparação.
            </summary>
            <param name="number"></param>
            <param name="numberCompare"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.LessThanOrEqual(System.Single,System.Single,System.String)">
            <summary>
            Valida se valor é menor ou igual ao valor de comparação.
            </summary>
            <param name="number"></param>
            <param name="numberCompare"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.LessThanOrEqual(Myframework.Libraries.Common.Validators.ValidatorStructResult{System.Single},System.Single,System.String)">
            <summary>
            Valida se valor é menor ou igual ao valor de comparação.
            </summary>
            <param name="result"></param>
            <param name="numberCompare"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.LessThanOrEqual(System.Nullable{System.Double},System.Double,System.String)">
            <summary>
            Valida se valor é menor ou igual ao valor de comparação.
            </summary>
            <param name="number"></param>
            <param name="numberCompare"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.LessThanOrEqual(System.Double,System.Double,System.String)">
            <summary>
            Valida se valor é menor ou igual ao valor de comparação.
            </summary>
            <param name="number"></param>
            <param name="numberCompare"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.LessThanOrEqual(Myframework.Libraries.Common.Validators.ValidatorStructResult{System.Double},System.Double,System.String)">
            <summary>
            Valida se valor é menor ou igual ao valor de comparação.
            </summary>
            <param name="result"></param>
            <param name="numberCompare"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.LessThanOrEqual(System.Nullable{System.DateTime},System.DateTime,System.String)">
            <summary>
            Valida se valor é menor ou igual ao valor de comparação.
            </summary>
            <param name="data"></param>
            <param name="dataCompare"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.LessThanOrEqual(System.DateTime,System.DateTime,System.String)">
            <summary>
            Valida se valor é menor ou igual ao valor de comparação.
            </summary>
            <param name="data"></param>
            <param name="dataCompare"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.LessThanOrEqual(Myframework.Libraries.Common.Validators.ValidatorStructResult{System.DateTime},System.DateTime,System.String)">
            <summary>
            Valida se valor é menor ou igual ao valor de comparação.
            </summary>
            <param name="result"></param>
            <param name="dataCompare"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.MaxLength(System.String,System.Int32,System.String)">
            <summary>
            Valida se a string tem o número de caracteres permitidos.
            </summary>
            <param name="str"></param>
            <param name="maxLength"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.MaxLength(Myframework.Libraries.Common.Validators.ValidatorClassResult{System.String},System.Int32,System.String)">
            <summary>
            Valida se a string tem o número de caracteres permitidos.
            </summary>
            <param name="result"></param>
            <param name="maxLength"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.MinLength(System.String,System.Int32,System.String)">
            <summary>
            Valida se a string tem o número de caracteres permitidos.
            </summary>
            <param name="str"></param>
            <param name="minLength"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.MinLength(Myframework.Libraries.Common.Validators.ValidatorClassResult{System.String},System.Int32,System.String)">
            <summary>
            Valida se a string tem o número de caracteres permitidos.
            </summary>
            <param name="result"></param>
            <param name="minLength"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.NotEmpty(System.String,System.String)">
            <summary>
            Valida se o valor não é vazio.
            </summary>
            <param name="str"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.NotEmpty(Myframework.Libraries.Common.Validators.ValidatorClassResult{System.String},System.String)">
            <summary>
            Valida se o valor não é vazio. 
            </summary>
            <param name="result"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.NotEmpty(System.Nullable{System.Guid},System.String)">
            <summary>
            Valida se o valor não é vazio.
            </summary>
            <param name="guid"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.NotEmpty(System.Guid,System.String)">
            <summary>
            Valida se o valor não é vazio.
            </summary>
            <param name="guid"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.NotEmpty(Myframework.Libraries.Common.Validators.ValidatorStructResult{System.Guid},System.String)">
            <summary>
            Valida se o valor não é vazio.
            </summary>
            <param name="result"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.NotEmpty(System.Collections.ICollection,System.String)">
            <summary>
            Valida se a lista não é vazia.
            </summary>
            <param name="collection"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.NotEmpty(Myframework.Libraries.Common.Validators.ValidatorClassResult{System.Collections.ICollection},System.String)">
            <summary>
            Valida se a lista não é vazia.
            </summary>
            <param name="result"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.NotNull(System.String,System.String)">
            <summary>
            Valida se o valor não é nulo.
            </summary>
            <param name="str"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.NotNull(Myframework.Libraries.Common.Validators.ValidatorClassResult{System.String},System.String)">
            <summary>
            Valida se o valor não é nulo.
            </summary>
            <param name="result"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.NotNull(System.Nullable{System.Int32},System.String)">
            <summary>
            Valida se o valor não é nulo.
            </summary>
            <param name="value"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.NotNull(System.Int32,System.String)">
            <summary>
            Valida se o valor não é nulo.
            </summary>
            <param name="value"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.NotNull(Myframework.Libraries.Common.Validators.ValidatorStructResult{System.Int32},System.String)">
            <summary>
            Valida se o valor não é nulo.
            </summary>
            <param name="result"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.NotNull(System.Nullable{System.Int64},System.String)">
            <summary>
            Valida se o valor não é nulo.
            </summary>
            <param name="value"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.NotNull(System.Int64,System.String)">
            <summary>
            Valida se o valor não é nulo.
            </summary>
            <param name="value"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.NotNull(Myframework.Libraries.Common.Validators.ValidatorStructResult{System.Int64},System.String)">
            <summary>
            Valida se o valor não é nulo.
            </summary>
            <param name="result"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.NotNull(System.Nullable{System.Int16},System.String)">
            <summary>
            Valida se o valor não é nulo.
            </summary>
            <param name="value"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.NotNull(System.Int16,System.String)">
            <summary>
            Valida se o valor não é nulo.
            </summary>
            <param name="value"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.NotNull(Myframework.Libraries.Common.Validators.ValidatorStructResult{System.Int16},System.String)">
            <summary>
            Valida se o valor não é nulo.
            </summary>
            <param name="result"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.NotNull(System.Nullable{System.Decimal},System.String)">
            <summary>
            Valida se o valor não é nulo.
            </summary>
            <param name="value"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.NotNull(System.Decimal,System.String)">
            <summary>
            Valida se o valor não é nulo.
            </summary>
            <param name="value"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.NotNull(Myframework.Libraries.Common.Validators.ValidatorStructResult{System.Decimal},System.String)">
            <summary>
            Valida se o valor não é nulo.
            </summary>
            <param name="result"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.NotNull(System.Nullable{System.Double},System.String)">
            <summary>
            Valida se o valor não é nulo.
            </summary>
            <param name="value"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.NotNull(System.Double,System.String)">
            <summary>
            Valida se o valor não é nulo.
            </summary>
            <param name="value"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.NotNull(Myframework.Libraries.Common.Validators.ValidatorStructResult{System.Double},System.String)">
            <summary>
            Valida se o valor não é nulo.
            </summary>
            <param name="result"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.NotNull(System.Nullable{System.Single},System.String)">
            <summary>
            Valida se o valor não é nulo.
            </summary>
            <param name="value"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.NotNull(System.Single,System.String)">
            <summary>
            Valida se o valor não é nulo.
            </summary>
            <param name="value"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.NotNull(Myframework.Libraries.Common.Validators.ValidatorStructResult{System.Single},System.String)">
            <summary>
            Valida se o valor não é nulo.
            </summary>
            <param name="result"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.NotNull(System.Nullable{System.Byte},System.String)">
            <summary>
            Valida se o valor não é nulo.
            </summary>
            <param name="value"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.NotNull(System.Byte,System.String)">
            <summary>
            Valida se o valor não é nulo.
            </summary>
            <param name="value"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.NotNull(Myframework.Libraries.Common.Validators.ValidatorStructResult{System.Byte},System.String)">
            <summary>
            Valida se o valor não é nulo.
            </summary>
            <param name="result"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.NotNull(System.Nullable{System.Guid},System.String)">
            <summary>
            Valida se o valor não é nulo.
            </summary>
            <param name="guid"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.NotNull(System.Guid,System.String)">
            <summary>
            Valida se o valor não é nulo.
            </summary>
            <param name="guid"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.NotNull(Myframework.Libraries.Common.Validators.ValidatorStructResult{System.Guid},System.String)">
            <summary>
            Valida se o valor não é nulo.
            </summary>
            <param name="result"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.NotNull(System.Nullable{System.DateTime},System.String)">
            <summary>
            Valida se o valor não é nulo.
            </summary>
            <param name="value"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.NotNull(System.DateTime,System.String)">
            <summary>
            Valida se o valor não é nulo.
            </summary>
            <param name="value"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.NotNull(Myframework.Libraries.Common.Validators.ValidatorStructResult{System.DateTime},System.String)">
            <summary>
            Valida se o valor não é nulo.
            </summary>
            <param name="result"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.NotNull(System.Object,System.String)">
            <summary>
            Valida se o valor não é nulo.
            </summary>
            <param name="obj"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.NotNull(Myframework.Libraries.Common.Validators.ValidatorClassResult{System.Object},System.String)">
            <summary>
            Valida se o valor não é nulo.
            </summary>
            <param name="result"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.Null(System.String,System.String)">
            <summary>
            Valida se o valor é nulo, caso contrário gera um resultado inválido.
            </summary>
            <param name="str">Valor a ser testado.</param>
            <param name="errorMsg">Mensagem que será mostrada para esta validação.</param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.Null(Myframework.Libraries.Common.Validators.ValidatorClassResult{System.String},System.String)">
            <summary>
            Valida se o valor é nulo, caso contrário gera um resultado inválido.
            </summary>
            <param name="result">.</param>
            <param name="errorMsg">Mensagem que será mostrada para esta validação.</param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.Null(System.Nullable{System.Guid},System.String)">
            <summary>
            Valida se o valor é nulo, caso contrário gera um resultado inválido.
            </summary>
            <param name="guid">Valor a ser testado.</param>
            <param name="errorMsg">Mensagem que será mostrada para esta validação.</param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.Null(System.Guid,System.String)">
            <summary>
            Valida se o valor é nulo, caso contrário gera um resultado inválido.
            </summary>
            <param name="guid"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.Null(Myframework.Libraries.Common.Validators.ValidatorStructResult{System.Guid},System.String)">
            <summary>
            Valida se o valor é nulo, caso contrário gera um resultado inválido.
            </summary>
            <param name="result"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.Null(System.Nullable{System.Int32},System.String)">
            <summary>
            Valida se o valor é nulo, caso contrário gera um resultado inválido.
            </summary>
            <param name="value">Valor a ser testado.</param>
            <param name="errorMsg">Mensagem que será mostrada para esta validação.</param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.Null(System.Int32,System.String)">
            <summary>
            Valida se o valor é nulo, caso contrário gera um resultado inválido.
            </summary>
            <param name="value"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.Null(Myframework.Libraries.Common.Validators.ValidatorStructResult{System.Int32},System.String)">
            <summary>
            Valida se o valor é nulo, caso contrário gera um resultado inválido.
            </summary>
            <param name="result"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.Null(System.Nullable{System.Int64},System.String)">
            <summary>
            Valida se o valor é nulo, caso contrário gera um resultado inválido.
            </summary>
            <param name="value">Valor a ser testado.</param>
            <param name="errorMsg">Mensagem que será mostrada para esta validação.</param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.Null(System.Int64,System.String)">
            <summary>
            Valida se o valor é nulo, caso contrário gera um resultado inválido.
            </summary>
            <param name="value"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.Null(Myframework.Libraries.Common.Validators.ValidatorStructResult{System.Int64},System.String)">
            <summary>
            Valida se o valor é nulo, caso contrário gera um resultado inválido.
            </summary>
            <param name="result"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.Null(System.Nullable{System.Int16},System.String)">
            <summary>
            Valida se o valor é nulo, caso contrário gera um resultado inválido.
            </summary>
            <param name="value">Valor a ser testado.</param>
            <param name="errorMsg">Mensagem que será mostrada para esta validação.</param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.Null(System.Int16,System.String)">
            <summary>
            Valida se o valor é nulo, caso contrário gera um resultado inválido.
            </summary>
            <param name="value"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.Null(Myframework.Libraries.Common.Validators.ValidatorStructResult{System.Int16},System.String)">
            <summary>
            Valida se o valor é nulo, caso contrário gera um resultado inválido.
            </summary>
            <param name="result"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.Null(System.Nullable{System.Decimal},System.String)">
            <summary>
            Valida se o valor é nulo, caso contrário gera um resultado inválido.
            </summary>
            <param name="value">Valor a ser testado.</param>
            <param name="errorMsg">Mensagem que será mostrada para esta validação.</param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.Null(System.Decimal,System.String)">
            <summary>
            Valida se o valor é nulo, caso contrário gera um resultado inválido.
            </summary>
            <param name="value"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.Null(Myframework.Libraries.Common.Validators.ValidatorStructResult{System.Decimal},System.String)">
            <summary>
            Valida se o valor é nulo, caso contrário gera um resultado inválido.
            </summary>
            <param name="result"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.Null(System.Nullable{System.Double},System.String)">
            <summary>
            Valida se o valor é nulo, caso contrário gera um resultado inválido.
            </summary>
            <param name="value">Valor a ser testado.</param>
            <param name="errorMsg">Mensagem que será mostrada para esta validação.</param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.Null(System.Double,System.String)">
            <summary>
            Valida se o valor é nulo, caso contrário gera um resultado inválido.
            </summary>
            <param name="value"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.Null(Myframework.Libraries.Common.Validators.ValidatorStructResult{System.Double},System.String)">
            <summary>
            Valida se o valor é nulo, caso contrário gera um resultado inválido.
            </summary>
            <param name="result"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.Null(System.Nullable{System.Single},System.String)">
            <summary>
            Valida se o valor é nulo, caso contrário gera um resultado inválido.
            </summary>
            <param name="value">Valor a ser testado.</param>
            <param name="errorMsg">Mensagem que será mostrada para esta validação.</param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.Null(System.Single,System.String)">
            <summary>
            Valida se o valor é nulo, caso contrário gera um resultado inválido.
            </summary>
            <param name="value"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.Null(Myframework.Libraries.Common.Validators.ValidatorStructResult{System.Single},System.String)">
            <summary>
            Valida se o valor é nulo, caso contrário gera um resultado inválido.
            </summary>
            <param name="result"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.Null(System.Nullable{System.Byte},System.String)">
            <summary>
            Valida se o valor é nulo, caso contrário gera um resultado inválido.
            </summary>
            <param name="value">Valor a ser testado.</param>
            <param name="errorMsg">Mensagem que será mostrada para esta validação.</param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.Null(System.Byte,System.String)">
            <summary>
            Valida se o valor é nulo, caso contrário gera um resultado inválido.
            </summary>
            <param name="value"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.Null(Myframework.Libraries.Common.Validators.ValidatorStructResult{System.Byte},System.String)">
            <summary>
            Valida se o valor é nulo, caso contrário gera um resultado inválido.
            </summary>
            <param name="result"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.Null(System.Nullable{System.DateTime},System.String)">
            <summary>
            Valida se o valor é nulo, caso contrário gera um resultado inválido.
            </summary>
            <param name="value">Valor a ser testado.</param>
            <param name="errorMsg">Mensagem que será mostrada para esta validação.</param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.Null(System.DateTime,System.String)">
            <summary>
            Valida se o valor é nulo, caso contrário gera um resultado inválido.
            </summary>
            <param name="value"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.Null(Myframework.Libraries.Common.Validators.ValidatorStructResult{System.DateTime},System.String)">
            <summary>
            Valida se o valor é nulo, caso contrário gera um resultado inválido.
            </summary>
            <param name="result"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.Null(System.Object,System.String)">
            <summary>
            Valida se o valor é nulo, caso contrário gera um resultado inválido.
            </summary>
            <param name="obj">Valor a ser testado.</param>
            <param name="errorMsg">Mensagem que será mostrada para esta validação.</param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.Null(Myframework.Libraries.Common.Validators.ValidatorClassResult{System.Object},System.String)">
            <summary>
            Valida se o valor é nulo, caso contrário gera um resultado inválido.
            </summary>
            <param name="result"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.PositiveNumber(System.Nullable{System.Int64},System.String)">
            <summary>
            Valida se o número é positivo.
            </summary>
            <param name="number"></param>        
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.PositiveNumber(System.Int64,System.String)">
            <summary>
            Valida se o número é positivo.
            </summary>
            <param name="number"></param>        
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.PositiveNumber(Myframework.Libraries.Common.Validators.ValidatorStructResult{System.Int64},System.String)">
            <summary>
            Valida se o número é positivo.
            </summary>
            <param name="result"></param>        
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.PositiveNumber(System.Nullable{System.Int32},System.String)">
            <summary>
            Valida se o número é positivo.
            </summary>
            <param name="number"></param>        
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.PositiveNumber(System.Int32,System.String)">
            <summary>
            Valida se o número é positivo.
            </summary>
            <param name="number"></param>        
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.PositiveNumber(Myframework.Libraries.Common.Validators.ValidatorStructResult{System.Int32},System.String)">
            <summary>
            Valida se o número é positivo.
            </summary>
            <param name="result"></param>        
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.PositiveNumber(System.Nullable{System.Int16},System.String)">
            <summary>
            Valida se o número é positivo.
            </summary>
            <param name="number"></param>        
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.PositiveNumber(System.Int16,System.String)">
            <summary>
            Valida se o número é positivo.
            </summary>
            <param name="number"></param>        
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.PositiveNumber(Myframework.Libraries.Common.Validators.ValidatorStructResult{System.Int16},System.String)">
            <summary>
            Valida se o número é positivo.
            </summary>
            <param name="result"></param>        
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.PositiveNumber(System.Nullable{System.Byte},System.String)">
            <summary>
            Valida se o número é positivo.
            </summary>
            <param name="number"></param>        
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.PositiveNumber(System.Byte,System.String)">
            <summary>
            Valida se o número é positivo.
            </summary>
            <param name="number"></param>        
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.PositiveNumber(Myframework.Libraries.Common.Validators.ValidatorStructResult{System.Byte},System.String)">
            <summary>
            Valida se o número é positivo.
            </summary>
            <param name="result"></param>        
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.PositiveNumber(System.Nullable{System.Decimal},System.String)">
            <summary>
            Valida se o número é positivo.
            </summary>
            <param name="number"></param>        
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.PositiveNumber(System.Decimal,System.String)">
            <summary>
            Valida se o número é positivo.
            </summary>
            <param name="number"></param>        
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.PositiveNumber(Myframework.Libraries.Common.Validators.ValidatorStructResult{System.Decimal},System.String)">
            <summary>
            Valida se o número é positivo.
            </summary>
            <param name="result"></param>        
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.PositiveNumber(System.Nullable{System.Single},System.String)">
            <summary>
            Valida se o número é positivo.
            </summary>
            <param name="number"></param>        
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.PositiveNumber(System.Single,System.String)">
            <summary>
            Valida se o número é positivo.
            </summary>
            <param name="number"></param>        
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.PositiveNumber(Myframework.Libraries.Common.Validators.ValidatorStructResult{System.Single},System.String)">
            <summary>
            Valida se o número é positivo.
            </summary>
            <param name="result"></param>        
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.PositiveNumber(System.Nullable{System.Double},System.String)">
            <summary>
            Valida se o número é positivo.
            </summary>
            <param name="number"></param>        
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.PositiveNumber(System.Double,System.String)">
            <summary>
            Valida se o número é positivo.
            </summary>
            <param name="number"></param>        
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.PositiveNumber(Myframework.Libraries.Common.Validators.ValidatorStructResult{System.Double},System.String)">
            <summary>
            Valida se o número é positivo.
            </summary>
            <param name="result"></param>        
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.RegexMatch(System.String,System.String,System.String)">
            <summary>
            Valida se a string corresponde ao Regex.
            </summary>
            <param name="str"></param>
            <param name="regexExpression"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.RegexMatch(Myframework.Libraries.Common.Validators.ValidatorClassResult{System.String},System.String,System.String)">
            <summary>
            Valida se a string corresponde ao Regex.
            </summary>
            <param name="result"></param>
            <param name="regexExpression"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.Url(System.String,System.String)">
            <summary>
            Valida a Url.
            </summary>
            <param name="str"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorExtensions.Url(Myframework.Libraries.Common.Validators.ValidatorClassResult{System.String},System.String)">
            <summary>
            Valida a Url.
            </summary>
            <param name="result"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="T:Myframework.Libraries.Common.Validators.IValidator">
            <summary>
            Interface para validadores.
            </summary>
        </member>
        <member name="P:Myframework.Libraries.Common.Validators.IValidator.Valid">
            <summary>
            Indica se o valor está válido ou não.
            </summary>
        </member>
        <member name="P:Myframework.Libraries.Common.Validators.IValidator.ErrorMessage">
            <summary>
            Mensagem de erro caso o valor não seja válido.
            </summary>
        </member>
        <member name="T:Myframework.Libraries.Common.Validators.IValidatorResult">
            <summary>
            Interface para resutlados de validações.
            </summary>
        </member>
        <member name="P:Myframework.Libraries.Common.Validators.IValidatorResult.Valid">
            <summary>
            Indica se o resultado de todos os validadores é válido ou não.
            </summary>
        </member>
        <member name="P:Myframework.Libraries.Common.Validators.IValidatorResult.Messages">
            <summary>
            Mensagens de erros.
            </summary>
        </member>
        <member name="P:Myframework.Libraries.Common.Validators.IValidatorResult.Message">
            <summary>
            Mensagem sumarizada de erros.
            </summary>
        </member>
        <member name="P:Myframework.Libraries.Common.Validators.IValidatorResult.Validators">
            <summary>
            Validadores que geraram este resultado.
            </summary>
        </member>
        <member name="T:Myframework.Libraries.Common.Validators.Types.BaseValidator">
            <summary>
            Classe base para os validadores com propriedades e métodos comum a todos.
            </summary>
        </member>
        <member name="P:Myframework.Libraries.Common.Validators.Types.BaseValidator.Valid">
            <summary>
            Indica se o valor está válido ou não.
            </summary>
        </member>
        <member name="P:Myframework.Libraries.Common.Validators.Types.BaseValidator.ErrorMessage">
            <summary>
            Mensagem de erro caso o valor não seja válido.
            </summary>
        </member>
        <member name="T:Myframework.Libraries.Common.Validators.Types.BetweenExclusiveValidator">
            <summary>
            Validador para verificar se valor está entre outros dois, NÃO incluindo o primeiro e o último valor de comparação.
            </summary>
        </member>
        <member name="T:Myframework.Libraries.Common.Validators.Types.BetweenInclusiveValidator">
            <summary>
            Validador para verificar se valor está entre outros dois, incluindo o primeiro e o último valor de comparação.
            </summary>
        </member>
        <member name="T:Myframework.Libraries.Common.Validators.Types.CpfValidator">
            <summary>
            Validador para CPF.
            </summary>
        </member>
        <member name="T:Myframework.Libraries.Common.Validators.Types.EmptyValidator">
            <summary>
            Validador para checar se o valor é vazio.
            </summary>
        </member>
        <member name="T:Myframework.Libraries.Common.Validators.Types.EnumIsDefinedValidator">
            <summary>
            Validador para checar se o enum pertence a lista de enum.
            </summary>
        </member>
        <member name="T:Myframework.Libraries.Common.Validators.Types.GreaterThanOrEqualValidator">
            <summary>
            Validador para checar se um valor é maior ou igual a outro.
            </summary>
        </member>
        <member name="T:Myframework.Libraries.Common.Validators.Types.GreaterThanValidator">
            <summary>
            Validador para checar se um valor é maior que o outro.
            </summary>
        </member>
        <member name="T:Myframework.Libraries.Common.Validators.Types.LessThanOrEqualValidator">
            <summary>
            Validador para checar se um valor é menor que o outro.
            </summary>
        </member>
        <member name="T:Myframework.Libraries.Common.Validators.Types.LessThanValidator">
            <summary>
            Validador para checar se um valor é menor que o outro.
            </summary>
        </member>
        <member name="T:Myframework.Libraries.Common.Validators.Types.MaxLengthValidator">
            <summary>
            Validador para length máximo.
            </summary>
        </member>
        <member name="T:Myframework.Libraries.Common.Validators.Types.MinLengthValidator">
            <summary>
            Validador para length mínimo.
            </summary>
        </member>
        <member name="T:Myframework.Libraries.Common.Validators.Types.MustValidator">
            <summary>
            Validador para uma função especializada.
            </summary>
        </member>
        <member name="T:Myframework.Libraries.Common.Validators.Types.NotEmptyValidator">
            <summary>
            Valida se o valor não é vazio.
            </summary>
        </member>
        <member name="T:Myframework.Libraries.Common.Validators.Types.NotNullValidator">
            <summary>
            Valida se o valor não é null.
            </summary>
        </member>
        <member name="T:Myframework.Libraries.Common.Validators.Types.NullValidator">
            <summary>
            Valida se o valor é null.
            </summary>
        </member>
        <member name="T:Myframework.Libraries.Common.Validators.Types.RegexMatchValidator">
            <summary>
            Validador para regex.
            </summary>
        </member>
        <member name="T:Myframework.Libraries.Common.Validators.Types.UrlValidator">
            <summary>
            Validador para url.
            </summary>
        </member>
        <member name="T:Myframework.Libraries.Common.Validators.ValidatorClassResult`1">
            <summary>
            Resultado de validadores do tipo class.
            </summary>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorClassResult`1.#ctor(`0)">
            <summary>
            
            </summary>
            <param name="originalValue"></param>
        </member>
        <member name="P:Myframework.Libraries.Common.Validators.ValidatorClassResult`1.OriginalValue">
            <summary>
            Valor original que está sendo validado.
            </summary>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorClassResult`1.AddValidator(Myframework.Libraries.Common.Validators.IValidator)">
            <summary>
            Adiciona um validador ao resultado.
            </summary>
            <param name="validator"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorClassResult`1.Aggregate(System.Collections.Generic.List{Myframework.Libraries.Common.Validators.ValidatorClassResult{`0}})">
            <summary>
            Agrega diversos resultados de validação em apenas um.
            </summary>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorClassResult`1.Aggregate(Myframework.Libraries.Common.Validators.ValidatorClassResult{`0}[])">
            <summary>
            Agrega um ou mais resultados de validação em apenas um.
            </summary>
        </member>
        <member name="T:Myframework.Libraries.Common.Validators.ValidatorStructResult`1">
            <summary>
            Resultado de validadores do tipo struct.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorStructResult`1.#ctor(System.Nullable{`0})">
            <summary>
            
            </summary>
            <param name="originalValue"></param>
        </member>
        <member name="P:Myframework.Libraries.Common.Validators.ValidatorStructResult`1.OriginalValue">
            <summary>
            Valor original que está sendo validado.
            </summary>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorStructResult`1.AddValidator(Myframework.Libraries.Common.Validators.IValidator)">
            <summary>
            Adiciona um validador ao resultado.
            </summary>
            <param name="validator"></param>
            <returns></returns>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorStructResult`1.Aggregate(System.Collections.Generic.List{Myframework.Libraries.Common.Validators.ValidatorStructResult{`0}})">
            <summary>
            Agrega diversos resultados de validação em apenas um.
            </summary>
        </member>
        <member name="M:Myframework.Libraries.Common.Validators.ValidatorStructResult`1.Aggregate(Myframework.Libraries.Common.Validators.ValidatorStructResult{`0}[])">
            <summary>
            Agrega um ou mais resultados de validação em apenas um.
            </summary>
        </member>
    </members>
</doc>
